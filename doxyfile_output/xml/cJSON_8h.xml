<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="cJSON_8h" kind="file" language="C++">
    <compoundname>cJSON.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includedby refid="cJSON_8c" local="yes">cJSON.c</includedby>
    <includedby refid="cJSON__Utils_8h" local="yes">cJSON_Utils.h</includedby>
    <includedby refid="afl_8c" local="yes">fuzzing/afl.c</includedby>
    <includedby refid="cjson__read__fuzzer_8c" local="yes">fuzzing/cjson_read_fuzzer.c</includedby>
    <includedby refid="test_8c" local="yes">test.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>cJSON.h</label>
        <link refid="cJSON_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="18">
        <label>tests/parse_with_opts.c</label>
        <link refid="parse__with__opts_8c"/>
      </node>
      <node id="26">
        <label>cJSON_Utils.c</label>
        <link refid="cJSON__Utils_8c"/>
      </node>
      <node id="25">
        <label>cJSON_Utils.h</label>
        <link refid="cJSON__Utils_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cJSON.c</label>
        <link refid="cJSON_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>cJSON.h</label>
        <link refid="cJSON_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>tests/print_value.c</label>
        <link refid="print__value_8c"/>
      </node>
      <node id="29">
        <label>test.c</label>
        <link refid="test_8c"/>
      </node>
      <node id="6">
        <label>tests/json_patch_tests.c</label>
        <link refid="json__patch__tests_8c"/>
      </node>
      <node id="22">
        <label>tests/print_string.c</label>
        <link refid="print__string_8c"/>
      </node>
      <node id="10">
        <label>tests/old_utils_tests.c</label>
        <link refid="old__utils__tests_8c"/>
      </node>
      <node id="16">
        <label>tests/parse_string.c</label>
        <link refid="parse__string_8c"/>
      </node>
      <node id="28">
        <label>fuzzing/cjson_read_fuzzer.c</label>
        <link refid="cjson__read__fuzzer_8c"/>
      </node>
      <node id="19">
        <label>tests/print_array.c</label>
        <link refid="print__array_8c"/>
      </node>
      <node id="3">
        <label>tests/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tests/cjson_add.c</label>
        <link refid="cjson__add_8c"/>
      </node>
      <node id="15">
        <label>tests/parse_object.c</label>
        <link refid="parse__object_8c"/>
      </node>
      <node id="12">
        <label>tests/parse_examples.c</label>
        <link refid="parse__examples_8c"/>
      </node>
      <node id="9">
        <label>tests/misc_utils_tests.c</label>
        <link refid="misc__utils__tests_8c"/>
      </node>
      <node id="27">
        <label>fuzzing/afl.c</label>
        <link refid="afl_8c"/>
      </node>
      <node id="11">
        <label>tests/parse_array.c</label>
        <link refid="parse__array_8c"/>
      </node>
      <node id="17">
        <label>tests/parse_value.c</label>
        <link refid="parse__value_8c"/>
      </node>
      <node id="8">
        <label>tests/misc_tests.c</label>
        <link refid="misc__tests_8c"/>
      </node>
      <node id="14">
        <label>tests/parse_number.c</label>
        <link refid="parse__number_8c"/>
      </node>
      <node id="7">
        <label>tests/minify_tests.c</label>
        <link refid="minify__tests_8c"/>
      </node>
      <node id="13">
        <label>tests/parse_hex4.c</label>
        <link refid="parse__hex4_8c"/>
      </node>
      <node id="21">
        <label>tests/print_object.c</label>
        <link refid="print__object_8c"/>
      </node>
      <node id="5">
        <label>tests/compare_tests.c</label>
        <link refid="compare__tests_8c"/>
      </node>
      <node id="20">
        <label>tests/print_number.c</label>
        <link refid="print__number_8c"/>
      </node>
      <node id="24">
        <label>tests/readme_examples.c</label>
        <link refid="readme__examples_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structcJSON" prot="public">cJSON</innerclass>
    <innerclass refid="structcJSON__Hooks" prot="public">cJSON_Hooks</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cJSON_8h_1a79203c3ba406ffd5736627cc1e082e38" prot="public" static="no">
        <name>CJSON_CDECL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="71" column="9" bodyfile="cJSON.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1aee2cdf14a236df79175ef257a5a94964" prot="public" static="no">
        <name>CJSON_STDCALL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="72" column="9" bodyfile="cJSON.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" prot="public" static="no">
        <name>CJSON_PUBLIC</name>
        <param><defname>type</defname></param>
        <initializer>type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="77" column="10" bodyfile="cJSON.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a78f100ac5089a51941e2ca573ad8e380" prot="public" static="no">
        <name>CJSON_VERSION_MAJOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="82" column="9" bodyfile="cJSON.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a55a808fe6b77cef1e4c2cf02a4316301" prot="public" static="no">
        <name>CJSON_VERSION_MINOR</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="83" column="9" bodyfile="cJSON.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a6ad7073103d4b9aaf2153add95561c47" prot="public" static="no">
        <name>CJSON_VERSION_PATCH</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="84" column="9" bodyfile="cJSON.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a80c36e86d8d65b697bc623fe28027668" prot="public" static="no">
        <name>cJSON_Invalid</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="89" column="9" bodyfile="cJSON.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a2d240682316354b5748f909ad220184b" prot="public" static="no">
        <name>cJSON_False</name>
        <initializer>(1 &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="90" column="9" bodyfile="cJSON.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1aad4e442b8095939decddfb67d87d9324" prot="public" static="no">
        <name>cJSON_True</name>
        <initializer>(1 &lt;&lt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="91" column="9" bodyfile="cJSON.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1aeadaba63ddb68aaa518528595d503dcd" prot="public" static="no">
        <name>cJSON_NULL</name>
        <initializer>(1 &lt;&lt; 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="92" column="9" bodyfile="cJSON.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a15e77e2f6457dc9b19c10ddb032af971" prot="public" static="no">
        <name>cJSON_Number</name>
        <initializer>(1 &lt;&lt; 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="93" column="9" bodyfile="cJSON.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1aa2cb4765308e2bbdf01988b2acdf92d9" prot="public" static="no">
        <name>cJSON_String</name>
        <initializer>(1 &lt;&lt; 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="94" column="9" bodyfile="cJSON.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a57cffa126740a8efcdcb7bcef80e8897" prot="public" static="no">
        <name>cJSON_Array</name>
        <initializer>(1 &lt;&lt; 5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="95" column="9" bodyfile="cJSON.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a22c6e13481c090629afbd77b7cebd24c" prot="public" static="no">
        <name>cJSON_Object</name>
        <initializer>(1 &lt;&lt; 6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="96" column="9" bodyfile="cJSON.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1ae9ddc931ea84908d12f48c5b7f8731a1" prot="public" static="no">
        <name>cJSON_Raw</name>
        <initializer>(1 &lt;&lt; 7) /* raw <ref refid="readme__examples_8c_1a4dd85a1ffd4add568eb3b646e857eadc" kindref="member">json</ref> */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="97" column="9" bodyfile="cJSON.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1ad3d18116aae3bfa46f13bcfd7fd6d4e7" prot="public" static="no">
        <name>cJSON_IsReference</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="99" column="9" bodyfile="cJSON.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a491c3484a36f3915cc4710088f55971f" prot="public" static="no">
        <name>cJSON_StringIsConst</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="100" column="9" bodyfile="cJSON.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1a9c7ac4e1b31070b787afb3a4b67727f4" prot="public" static="no">
        <name>CJSON_NESTING_LIMIT</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="137" column="9" bodyfile="cJSON.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1ae5b1335bfccc358f566bea6f7e4bfdc6" prot="public" static="no">
        <name>cJSON_SetIntValue</name>
        <param><defname>object</defname></param>
        <param><defname>number</defname></param>
        <initializer>((object) ? (object)-&gt;valueint = (object)-&gt;valuedouble = (number) : (number))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="275" column="9" bodyfile="cJSON.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1adab3f1e3586395bdb2da5a40059cb24b" prot="public" static="no">
        <name>cJSON_SetNumberValue</name>
        <param><defname>object</defname></param>
        <param><defname>number</defname></param>
        <initializer>((object != NULL) ? <ref refid="cJSON_8h_1a95d6295c4fcb12785bc5bc900b4c7828" kindref="member">cJSON_SetNumberHelper</ref>(object, (double)number) : (number))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="278" column="9" bodyfile="cJSON.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cJSON_8h_1ac3d6e5782fb4bb3c7a25c7c5b1868f06" prot="public" static="no">
        <name>cJSON_ArrayForEach</name>
        <param><defname>element</defname></param>
        <param><defname>array</defname></param>
        <initializer>for(element = (array != NULL) ? (array)-&gt;child : NULL; element != NULL; element = element-&gt;next)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="283" column="9" bodyfile="cJSON.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cJSON_8h_1a4c146234dfd7b6adbf13b49505e995bc" prot="public" static="no">
        <type>struct <ref refid="structcJSON" kindref="compound">cJSON</ref></type>
        <definition>typedef struct cJSON cJSON</definition>
        <argsstring></argsstring>
        <name>cJSON</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="123" column="7"/>
      </memberdef>
      <memberdef kind="typedef" id="cJSON_8h_1ab67bc592e52110fee68ab8ab4140530d" prot="public" static="no">
        <type>struct <ref refid="structcJSON__Hooks" kindref="compound">cJSON_Hooks</ref></type>
        <definition>typedef struct cJSON_Hooks cJSON_Hooks</definition>
        <argsstring></argsstring>
        <name>cJSON_Hooks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="130" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" prot="public" static="no">
        <type>int</type>
        <definition>typedef int cJSON_bool</definition>
        <argsstring></argsstring>
        <name>cJSON_bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="132" column="13" bodyfile="cJSON.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cJSON_8h_1ade07c00ada9acf6ffc5d33907d36cb8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* cJSON_Version</definition>
        <argsstring>(void)</argsstring>
        <name>cJSON_Version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="141" column="14" bodyfile="cJSON.c" bodystart="124" bodyend="130" declfile="cJSON.h" declline="141" declcolumn="14"/>
        <references refid="cJSON_8h_1a78f100ac5089a51941e2ca573ad8e380" compoundref="cJSON_8h" startline="82">CJSON_VERSION_MAJOR</references>
        <references refid="cJSON_8h_1a55a808fe6b77cef1e4c2cf02a4316301" compoundref="cJSON_8h" startline="83">CJSON_VERSION_MINOR</references>
        <references refid="cJSON_8h_1a6ad7073103d4b9aaf2153add95561c47" compoundref="cJSON_8h" startline="84">CJSON_VERSION_PATCH</references>
        <referencedby refid="test_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test_8c" startline="259" endline="268">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a20837ed285a3c2abf578330f2bd97ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cJSON_InitHooks</definition>
        <argsstring>(cJSON_Hooks *hooks)</argsstring>
        <name>cJSON_InitHooks</name>
        <param>
          <type><ref refid="structcJSON__Hooks" kindref="compound">cJSON_Hooks</ref> *</type>
          <declname>hooks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="144" column="8" bodyfile="cJSON.c" bodystart="209" bodyend="238" declfile="cJSON.h" declline="144" declcolumn="8"/>
        <references refid="structinternal__hooks_1ad1a502782955f6cceb0b75fb16cb6f92" compoundref="cJSON_8c" startline="158">internal_hooks::allocate</references>
        <references refid="structinternal__hooks_1a183ba09ef4a15f75fec90d3a14ff587e" compoundref="cJSON_8c" startline="159">internal_hooks::deallocate</references>
        <references refid="unity__fixture__malloc__overrides_8h_1a2c6efa7679f8cd9f61af96e105017560" compoundref="unity__fixture__malloc__overrides_8h" startline="40">free</references>
        <references refid="structcJSON__Hooks_1a1a06e9718a48402de0e2ae5cc5118cdb" compoundref="cJSON_8h" startline="129">cJSON_Hooks::free_fn</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__fixture__malloc__overrides_8h_1acf143577800376dd931c059ecc61ba06" compoundref="unity__fixture__malloc__overrides_8h" startline="37">malloc</references>
        <references refid="structcJSON__Hooks_1a96ddf6d694eaa3f83aa10ee57539a5d8" compoundref="cJSON_8h" startline="128">cJSON_Hooks::malloc_fn</references>
        <references refid="unity__fixture__malloc__overrides_8h_1a1b739878adcdb46fb5d209af7ce79628" compoundref="unity__fixture__malloc__overrides_8h" startline="39">realloc</references>
        <references refid="structinternal__hooks_1a96d3980642593c6960af75e29925b5d7" compoundref="cJSON_8c" startline="160">internal_hooks::reallocate</references>
        <referencedby refid="cjson__add_8c_1a008722fbefd317869e031ebbabf574df" compoundref="cjson__add_8c" startline="412" endline="423">cjson_add_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1ad60f93569585858a582867bac944cc29" compoundref="cjson__add_8c" startline="229" endline="240">cjson_add_bool_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1aa6f2cab70fbe47fe7006420d79fa76a6" compoundref="cjson__add_8c" startline="187" endline="198">cjson_add_false_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1aebf28b3f89ed1b346bd8aab639c6372c" compoundref="cjson__add_8c" startline="71" endline="82">cjson_add_null_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1acf27b6aa94c2c8d2b29152bcafd0fb89" compoundref="cjson__add_8c" startline="268" endline="279">cjson_add_number_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a185a89f8e24cac97d1cb2e4a1a8278db" compoundref="cjson__add_8c" startline="377" endline="388">cjson_add_object_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1af6881b7e57f75a6ff44ec50b2939d2da" compoundref="cjson__add_8c" startline="342" endline="353">cjson_add_raw_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a9332b1a2d2ad53a70d56eb65e5f50c8e" compoundref="cjson__add_8c" startline="305" endline="316">cjson_add_string_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1ae9470b7ad04d9da4f6ab52d2ed0222fa" compoundref="cjson__add_8c" startline="107" endline="118">cjson_add_true_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a6a356f38f42a1e49ba155273a48e9160" compoundref="cjson__add_8c" startline="142" endline="151">cjson_create_double_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a959d654b8a9d7d7ca6d5af0355419ed0" compoundref="cjson__add_8c" startline="131" endline="140">cjson_create_float_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a2345e8af2c128cd86a05fa37591e81ae" compoundref="cjson__add_8c" startline="120" endline="129">cjson_create_int_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a5fccd141f29329062e01226286a9d4ee" compoundref="cjson__add_8c" startline="153" endline="162">cjson_create_string_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1ad3df5f943457d4befebe4109d48e4a50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_Parse</definition>
        <argsstring>(const char *value)</argsstring>
        <name>cJSON_Parse</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="148" column="10" bodyfile="cJSON.c" bodystart="1171" bodyend="1174" declfile="cJSON.h" declline="148" declcolumn="10"/>
        <references refid="cJSON_8c_1a5aedf7671708bc3a77f3393f3ded6265" compoundref="cJSON_8c" startline="1075" endline="1088">cJSON_ParseWithOpts</references>
        <referencedby refid="compare__tests_8c_1a85a35043b591b7cc9aa0ce025f7b6850" compoundref="compare__tests_8c" startline="121" endline="139">cjson_compare_should_compare_raw</referencedby>
        <referencedby refid="misc__tests_8c_1a658c34a7906299a70100225956260653" compoundref="misc__tests_8c" startline="584" endline="616">cjson_delete_item_from_array_should_not_broken_list_structure</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1abe19814f80199e414e440866b87c9402" compoundref="misc__tests_8c" startline="99" endline="128">cjson_get_object_item_case_sensitive_should_get_object_items</referencedby>
        <referencedby refid="misc__tests_8c_1a9e6fc6d9566d4f6addc4e911c5d4a9a7" compoundref="misc__tests_8c" startline="141" endline="150">cjson_get_object_item_case_sensitive_should_not_crash_with_array</referencedby>
        <referencedby refid="misc__tests_8c_1a7747c301507939a00a1f4ba0d9cd2a39" compoundref="misc__tests_8c" startline="67" endline="97">cjson_get_object_item_should_get_object_items</referencedby>
        <referencedby refid="misc__tests_8c_1a8df4d7a2abdf8f913602b5e5c88fd6ee" compoundref="misc__tests_8c" startline="130" endline="139">cjson_get_object_item_should_not_crash_with_array</referencedby>
        <referencedby refid="misc__tests_8c_1a06e02ea5758a010882e0e97d94438c18" compoundref="misc__tests_8c" startline="618" endline="651">cjson_set_valuestring_to_object_should_not_leak_memory</referencedby>
        <referencedby refid="misc__tests_8c_1a35915b5ece822c893086459dcf57706f" compoundref="misc__tests_8c" startline="208" endline="220">cjson_should_not_parse_to_deeply_nested_jsons</referencedby>
        <referencedby refid="compare__tests_8c_1a3e7af6bf4c2d42bcd521dd3783e75998" compoundref="compare__tests_8c" startline="27" endline="44">compare_from_string</referencedby>
        <referencedby refid="parse__examples_8c_1a4c9096820a56c3fc969b25e159e34c83" compoundref="parse__examples_8c" startline="134" endline="155">file_test6_should_not_be_parsed</referencedby>
        <referencedby refid="old__utils__tests_8c_1adb6b0c8e83b5b398535412ed78af6616" compoundref="old__utils__tests_8c" startline="192" endline="212">generate_merge_tests</referencedby>
        <referencedby refid="old__utils__tests_8c_1a5b450637565a7e09b4fc5cbf6bad28e2" compoundref="old__utils__tests_8c" startline="52" endline="86">json_pointer_tests</referencedby>
        <referencedby refid="afl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="afl_8c" startline="85" endline="176">main</referencedby>
        <referencedby refid="old__utils__tests_8c_1aa1bbd39feda45d95a138a2ad6f7ee52b" compoundref="old__utils__tests_8c" startline="168" endline="190">merge_tests</referencedby>
        <referencedby refid="parse__examples_8c_1adc2b507bbba1e5488db139e84db16b49" compoundref="parse__examples_8c" startline="31" endline="44">parse_file</referencedby>
        <referencedby refid="json__patch__tests_8c_1a9ae7df22687b441f77b603d26e50cf93" compoundref="json__patch__tests_8c" startline="32" endline="47">parse_test_file</referencedby>
        <referencedby refid="readme__examples_8c_1aac8a48367d8eb50de4be9aa823415b34" compoundref="readme__examples_8c" startline="169" endline="215">supports_full_hd</referencedby>
        <referencedby refid="parse__examples_8c_1a224e3135fe2fe492a791e9e28954c28e" compoundref="parse__examples_8c" startline="182" endline="196">test12_should_not_be_parsed</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1afa205505c530b53131ea983834e4d0d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_ParseWithLength</definition>
        <argsstring>(const char *value, size_t buffer_length)</argsstring>
        <name>cJSON_ParseWithLength</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="149" column="10" bodyfile="cJSON.c" bodystart="1176" bodyend="1179" declfile="cJSON.h" declline="149" declcolumn="10"/>
        <references refid="cJSON_8c_1af72a0b4e3c59e7053859c0c0fe4fcda3" compoundref="cJSON_8c" startline="1091" endline="1168">cJSON_ParseWithLengthOpts</references>
        <referencedby refid="parse__examples_8c_1a3ce7be2354d50797d4bff7e17e473e38" compoundref="parse__examples_8c" startline="198" endline="225">test13_should_be_parsed_without_null_termination</referencedby>
        <referencedby refid="parse__examples_8c_1aa7d4fb1ee4ed7c0889b38bdbf883c15e" compoundref="parse__examples_8c" startline="227" endline="251">test14_should_not_be_parsed</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a5aedf7671708bc3a77f3393f3ded6265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_ParseWithOpts</definition>
        <argsstring>(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)</argsstring>
        <name>cJSON_ParseWithOpts</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>return_parse_end</declname>
        </param>
        <param>
          <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
          <declname>require_null_terminated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="152" column="10" bodyfile="cJSON.c" bodystart="1075" bodyend="1088" declfile="cJSON.h" declline="152" declcolumn="10"/>
        <references refid="cJSON_8c_1af72a0b4e3c59e7053859c0c0fe4fcda3" compoundref="cJSON_8c" startline="1091" endline="1168">cJSON_ParseWithLengthOpts</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON_8c_1ad3df5f943457d4befebe4109d48e4a50" compoundref="cJSON_8c" startline="1171" endline="1174">cJSON_Parse</referencedby>
        <referencedby refid="cjson__read__fuzzer_8c_1a91ce7c16e9840492202299da2b451e60" compoundref="cjson__read__fuzzer_8c" startline="13" endline="72">LLVMFuzzerTestOneInput</referencedby>
        <referencedby refid="parse__with__opts_8c_1a19ac84ade92023d69bca3f2142a16eae" compoundref="parse__with__opts_8c" startline="39" endline="50">parse_with_opts_should_handle_empty_strings</referencedby>
        <referencedby refid="parse__with__opts_8c_1a206139bc647d25a319796c17e34aaaa2" compoundref="parse__with__opts_8c" startline="52" endline="60">parse_with_opts_should_handle_incomplete_json</referencedby>
        <referencedby refid="parse__with__opts_8c_1acb959452425ce2bf1aa1396879b99ef0" compoundref="parse__with__opts_8c" startline="27" endline="37">parse_with_opts_should_handle_null</referencedby>
        <referencedby refid="parse__with__opts_8c_1a71a233b608f7216650144d100ef405e9" compoundref="parse__with__opts_8c" startline="84" endline="98">parse_with_opts_should_parse_utf8_bom</referencedby>
        <referencedby refid="parse__with__opts_8c_1a074a88b31ed3cf8062ffd0f5b04d853e" compoundref="parse__with__opts_8c" startline="62" endline="71">parse_with_opts_should_require_null_if_requested</referencedby>
        <referencedby refid="parse__with__opts_8c_1ae9d7543cb34dd5b96a4d5ba2a3ef7610" compoundref="parse__with__opts_8c" startline="73" endline="82">parse_with_opts_should_return_parse_end</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1af72a0b4e3c59e7053859c0c0fe4fcda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_ParseWithLengthOpts</definition>
        <argsstring>(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)</argsstring>
        <name>cJSON_ParseWithLengthOpts</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_length</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>return_parse_end</declname>
        </param>
        <param>
          <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
          <declname>require_null_terminated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="153" column="10" bodyfile="cJSON.c" bodystart="1091" bodyend="1168" declfile="cJSON.h" declline="153" declcolumn="10"/>
        <references refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" compoundref="unity__output__Spy_8c" startline="17">buffer</references>
        <references refid="cJSON_8c_1ac538057ef78677344d222b763251af5e" compoundref="cJSON_8c" startline="302">buffer_at_offset</references>
        <references refid="cJSON_8c_1a029a2c33fa2744a7cc5cf061f28d2cfc" compoundref="cJSON_8c" startline="1034" endline="1057">buffer_skip_whitespace</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" compoundref="cJSON_8c" startline="289">parse_buffer::content</references>
        <references refid="cJSON_8c_1a6ff6e9678e47cf5347872008661d5846" compoundref="cJSON_8c" startline="92">global_error</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="structparse__buffer_1a2c3e99b15da2935fc5d58124ffb4a894" compoundref="cJSON_8c" startline="293">parse_buffer::hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structerror_1a9b123855d5dd48e86de846588462b39f" compoundref="cJSON_8c" startline="89">error::json</references>
        <references refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" compoundref="cJSON_8c" startline="290">parse_buffer::length</references>
        <references refid="structparse__buffer_1af727920073077579942a79de519bb31a" compoundref="cJSON_8c" startline="291">parse_buffer::offset</references>
        <references refid="cJSON_8c_1afd5c0b7089e4de2fc9b2af599d4b596f" compoundref="cJSON_8c" startline="1308" endline="1360">parse_value</references>
        <references refid="structerror_1a24de70a4d517ab351d80c18582cadb66" compoundref="cJSON_8c" startline="90">error::position</references>
        <references refid="cJSON_8c_1a13b2d9f17c3b80a8878405f2782cd916" compoundref="cJSON_8c" startline="1060" endline="1073">skip_utf8_bom</references>
        <referencedby refid="cJSON_8c_1afa205505c530b53131ea983834e4d0d2" compoundref="cJSON_8c" startline="1176" endline="1179">cJSON_ParseWithLength</referencedby>
        <referencedby refid="cJSON_8c_1a5aedf7671708bc3a77f3393f3ded6265" compoundref="cJSON_8c" startline="1075" endline="1088">cJSON_ParseWithOpts</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1ae2177acac9871b89531e722b49f14925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* cJSON_Print</definition>
        <argsstring>(const cJSON *item)</argsstring>
        <name>cJSON_Print</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="156" column="9" bodyfile="cJSON.c" bodystart="1248" bodyend="1251" declfile="cJSON.h" declline="156" declcolumn="9"/>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="cJSON_8c_1ae71e2aec89bf140e6430cb7d5ca417c5" compoundref="cJSON_8c" startline="1183" endline="1245">print</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="readme__examples_8c_1ab10b3b636031ab2ee2c74f1718760d03" compoundref="readme__examples_8c" startline="45" endline="115">create_monitor</referencedby>
        <referencedby refid="readme__examples_8c_1a3df44a6d83f425696bde276722b71b5f" compoundref="readme__examples_8c" startline="117" endline="166">create_monitor_with_helpers</referencedby>
        <referencedby refid="parse__examples_8c_1a4fbda33e341c1283f821d7282319ee73" compoundref="parse__examples_8c" startline="46" endline="107">do_test</referencedby>
        <referencedby refid="cjson__read__fuzzer_8c_1a91ce7c16e9840492202299da2b451e60" compoundref="cjson__read__fuzzer_8c" startline="13" endline="72">LLVMFuzzerTestOneInput</referencedby>
        <referencedby refid="afl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="afl_8c" startline="85" endline="176">main</referencedby>
        <referencedby refid="test_8c_1a53f7a0ea107b3ead17e29ce78540b9f1" compoundref="test_8c" startline="43" endline="106">print_preallocated</referencedby>
        <referencedby refid="json__patch__tests_8c_1aa59e85969b210bbc43f2105bb522c73a" compoundref="json__patch__tests_8c" startline="122" endline="181">test_generate_test</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a0fa352e498073ced1c7fb9b84b5f684c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* cJSON_PrintUnformatted</definition>
        <argsstring>(const cJSON *item)</argsstring>
        <name>cJSON_PrintUnformatted</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="158" column="9" bodyfile="cJSON.c" bodystart="1253" bodyend="1256" declfile="cJSON.h" declline="158" declcolumn="9"/>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="cJSON_8c_1ae71e2aec89bf140e6430cb7d5ca417c5" compoundref="cJSON_8c" startline="1183" endline="1245">print</references>
        <referencedby refid="misc__tests_8c_1a658c34a7906299a70100225956260653" compoundref="misc__tests_8c" startline="584" endline="616">cjson_delete_item_from_array_should_not_broken_list_structure</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="old__utils__tests_8c_1adb6b0c8e83b5b398535412ed78af6616" compoundref="old__utils__tests_8c" startline="192" endline="212">generate_merge_tests</referencedby>
        <referencedby refid="cjson__read__fuzzer_8c_1a91ce7c16e9840492202299da2b451e60" compoundref="cjson__read__fuzzer_8c" startline="13" endline="72">LLVMFuzzerTestOneInput</referencedby>
        <referencedby refid="afl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="afl_8c" startline="85" endline="176">main</referencedby>
        <referencedby refid="old__utils__tests_8c_1aa1bbd39feda45d95a138a2ad6f7ee52b" compoundref="old__utils__tests_8c" startline="168" endline="190">merge_tests</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a318ef2c8804675893ed66dd28149cb12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* cJSON_PrintBuffered</definition>
        <argsstring>(const cJSON *item, int prebuffer, cJSON_bool fmt)</argsstring>
        <name>cJSON_PrintBuffered</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prebuffer</declname>
        </param>
        <param>
          <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="160" column="9" bodyfile="cJSON.c" bodystart="1258" bodyend="1286" declfile="cJSON.h" declline="160" declcolumn="9"/>
        <references refid="structinternal__hooks_1ad1a502782955f6cceb0b75fb16cb6f92" compoundref="cJSON_8c" startline="158">internal_hooks::allocate</references>
        <references refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" compoundref="cJSON_8c" startline="429">printbuffer::buffer</references>
        <references refid="structinternal__hooks_1a183ba09ef4a15f75fec90d3a14ff587e" compoundref="cJSON_8c" startline="159">internal_hooks::deallocate</references>
        <references refid="structprintbuffer_1a75d3f480f5308e7f4afecf30e11277ef" compoundref="cJSON_8c" startline="434">printbuffer::format</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="structprintbuffer_1a43a8b3bcc644432f12f5aed5159d2520" compoundref="cJSON_8c" startline="435">printbuffer::hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structprintbuffer_1a1a679f8b6fe9b413fb3a87203b0f5bc8" compoundref="cJSON_8c" startline="430">printbuffer::length</references>
        <references refid="structprintbuffer_1aa2a7966b71dc3535e4e3789c33ec5368" compoundref="cJSON_8c" startline="433">printbuffer::noalloc</references>
        <references refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" compoundref="cJSON_8c" startline="431">printbuffer::offset</references>
        <references refid="cJSON_8c_1a5ba141f183b9abb4b49e38a211299c7e" compoundref="cJSON_8c" startline="1363" endline="1434">print_value</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cjson__read__fuzzer_8c_1a91ce7c16e9840492202299da2b451e60" compoundref="cjson__read__fuzzer_8c" startline="13" endline="72">LLVMFuzzerTestOneInput</referencedby>
        <referencedby refid="afl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="afl_8c" startline="85" endline="176">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1afc7c06663cbfb2acf82d6db5f1436fbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_PrintPreallocated</definition>
        <argsstring>(cJSON *item, char *buffer, const int length, const cJSON_bool format)</argsstring>
        <name>cJSON_PrintPreallocated</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const <ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="163" column="14" bodyfile="cJSON.c" bodystart="1288" bodyend="1305" declfile="cJSON.h" declline="163" declcolumn="14"/>
        <references refid="structprintbuffer_1a754f63618e91db99f7ab6cfc4e629013" compoundref="cJSON_8c" startline="429">printbuffer::buffer</references>
        <references refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" compoundref="unity__output__Spy_8c" startline="17">buffer</references>
        <references refid="structprintbuffer_1a75d3f480f5308e7f4afecf30e11277ef" compoundref="cJSON_8c" startline="434">printbuffer::format</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="structprintbuffer_1a43a8b3bcc644432f12f5aed5159d2520" compoundref="cJSON_8c" startline="435">printbuffer::hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structprintbuffer_1a1a679f8b6fe9b413fb3a87203b0f5bc8" compoundref="cJSON_8c" startline="430">printbuffer::length</references>
        <references refid="structprintbuffer_1aa2a7966b71dc3535e4e3789c33ec5368" compoundref="cJSON_8c" startline="433">printbuffer::noalloc</references>
        <references refid="structprintbuffer_1a3ed6f9d24d6591047680492a962dc7c9" compoundref="cJSON_8c" startline="431">printbuffer::offset</references>
        <references refid="cJSON_8c_1a5ba141f183b9abb4b49e38a211299c7e" compoundref="cJSON_8c" startline="1363" endline="1434">print_value</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="test_8c_1a53f7a0ea107b3ead17e29ce78540b9f1" compoundref="test_8c" startline="43" endline="106">print_preallocated</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a927f7b148cc30fc17210a4511f724cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cJSON_Delete</definition>
        <argsstring>(cJSON *item)</argsstring>
        <name>cJSON_Delete</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="165" column="8" bodyfile="cJSON.c" bodystart="253" bodyend="274" declfile="cJSON.h" declline="165" declcolumn="8"/>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8h_1ad3d18116aae3bfa46f13bcfd7fd6d4e7" compoundref="cJSON_8h" startline="99">cJSON_IsReference</references>
        <references refid="cJSON_8h_1a491c3484a36f3915cc4710088f55971f" compoundref="cJSON_8h" startline="100">cJSON_StringIsConst</references>
        <references refid="structinternal__hooks_1a183ba09ef4a15f75fec90d3a14ff587e" compoundref="cJSON_8c" startline="159">internal_hooks::deallocate</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ade862b880379b5e2a591f7326401fa8d" compoundref="cJSON_8h" startline="106">cJSON::next</references>
        <references refid="structcJSON_1aa6b47e9a4b0e0a26f519b1a2b6739983" compoundref="cJSON_8h" startline="122">cJSON::string</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <references refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" compoundref="cJSON_8h" startline="115">cJSON::valuestring</references>
        <referencedby refid="cJSON__Utils_8c_1ae7f4ca7c392e544cb2fb6ff04af7a7ab" compoundref="cJSON__Utils_8c" startline="807" endline="1036">apply_patch</referencedby>
        <referencedby refid="cjson__add_8c_1a68aad8702c7daab6b0aced5ed76a15bf" compoundref="cjson__add_8c" startline="390" endline="400">cJSON_add_array_should_add_array</referencedby>
        <referencedby refid="cjson__add_8c_1a008722fbefd317869e031ebbabf574df" compoundref="cjson__add_8c" startline="412" endline="423">cjson_add_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1ad268e05d4df8d72c3c2a96d528b403b1" compoundref="cjson__add_8c" startline="402" endline="410">cjson_add_array_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1a906dee347b143ba380bd5c35dd2b5c11" compoundref="cjson__add_8c" startline="200" endline="217">cjson_add_bool_should_add_bool</referencedby>
        <referencedby refid="cjson__add_8c_1ad60f93569585858a582867bac944cc29" compoundref="cjson__add_8c" startline="229" endline="240">cjson_add_bool_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a216505e918c4eefab3ce964655506947" compoundref="cjson__add_8c" startline="219" endline="227">cjson_add_bool_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1ae7ee5f05d3311d2480865aaa71c128f0" compoundref="cjson__add_8c" startline="164" endline="175">cjson_add_false_should_add_false</referencedby>
        <referencedby refid="cjson__add_8c_1aa6f2cab70fbe47fe7006420d79fa76a6" compoundref="cjson__add_8c" startline="187" endline="198">cjson_add_false_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a84a509f291b16c31518e35506cdafe99" compoundref="cjson__add_8c" startline="177" endline="185">cjson_add_false_should_fail_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1a9a9771de88a32752b40c60449e746f9d" compoundref="misc__tests_8c" startline="549" endline="563">cjson_add_item_to_object_or_array_should_not_add_itself</referencedby>
        <referencedby refid="misc__tests_8c_1afafcede9e71e151a8b580f7c479a4788" compoundref="misc__tests_8c" startline="565" endline="582">cjson_add_item_to_object_should_not_use_after_free_when_string_is_aliased</referencedby>
        <referencedby refid="cjson__add_8c_1a31a2dc3dfe049283ebaea153555f443f" compoundref="cjson__add_8c" startline="48" endline="59">cjson_add_null_should_add_null</referencedby>
        <referencedby refid="cjson__add_8c_1aebf28b3f89ed1b346bd8aab639c6372c" compoundref="cjson__add_8c" startline="71" endline="82">cjson_add_null_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a52b973a8a39fce650a2dd3fb80ee5bab" compoundref="cjson__add_8c" startline="61" endline="69">cjson_add_null_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1a90630b9261ccf9f102de52bb85d1dda3" compoundref="cjson__add_8c" startline="242" endline="256">cjson_add_number_should_add_number</referencedby>
        <referencedby refid="cjson__add_8c_1acf27b6aa94c2c8d2b29152bcafd0fb89" compoundref="cjson__add_8c" startline="268" endline="279">cjson_add_number_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a83921007d8ad36822427034ca1d6aa11" compoundref="cjson__add_8c" startline="258" endline="266">cjson_add_number_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1a9098c85ee9dd963cfc682ab328932707" compoundref="cjson__add_8c" startline="355" endline="365">cJSON_add_object_should_add_object</referencedby>
        <referencedby refid="cjson__add_8c_1a185a89f8e24cac97d1cb2e4a1a8278db" compoundref="cjson__add_8c" startline="377" endline="388">cjson_add_object_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a8022426b2f978e4a9191fc8d817c2040" compoundref="cjson__add_8c" startline="367" endline="375">cjson_add_object_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1aad320d705b69a79d3797b02db41b8335" compoundref="cjson__add_8c" startline="318" endline="330">cjson_add_raw_should_add_raw</referencedby>
        <referencedby refid="cjson__add_8c_1af6881b7e57f75a6ff44ec50b2939d2da" compoundref="cjson__add_8c" startline="342" endline="353">cjson_add_raw_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a47ed6a71469c72ca1b91613b7a0babd9" compoundref="cjson__add_8c" startline="332" endline="340">cjson_add_raw_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1a79abc4fe5667eded0df91b5320edbf85" compoundref="cjson__add_8c" startline="281" endline="293">cjson_add_string_should_add_string</referencedby>
        <referencedby refid="cjson__add_8c_1a9332b1a2d2ad53a70d56eb65e5f50c8e" compoundref="cjson__add_8c" startline="305" endline="316">cjson_add_string_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a33ebaa2876583bc1ccb1641addc9c20f" compoundref="cjson__add_8c" startline="295" endline="303">cjson_add_string_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1a2f02038182067b35da56b958618caa6f" compoundref="cjson__add_8c" startline="84" endline="95">cjson_add_true_should_add_true</referencedby>
        <referencedby refid="cjson__add_8c_1ae9470b7ad04d9da4f6ab52d2ed0222fa" compoundref="cjson__add_8c" startline="107" endline="118">cjson_add_true_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a617f9dc0ec20654d1a6be0650907f3ae" compoundref="cjson__add_8c" startline="97" endline="105">cjson_add_true_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cJSON_8c_1a9aee370d9aa8997e5a39f76a643792ed" compoundref="cJSON_8c" startline="2171" endline="2181">cJSON_AddArrayToObject</referencedby>
        <referencedby refid="cJSON_8c_1a421ba4c0e845aff2e4c8efcbd70d75d4" compoundref="cJSON_8c" startline="2111" endline="2121">cJSON_AddBoolToObject</referencedby>
        <referencedby refid="cJSON_8c_1ad162d48e83915525082bcbeed6262d91" compoundref="cJSON_8c" startline="2099" endline="2109">cJSON_AddFalseToObject</referencedby>
        <referencedby refid="cJSON_8c_1a6e425c8aa8e9577cb4511a6be0959d9a" compoundref="cJSON_8c" startline="2075" endline="2085">cJSON_AddNullToObject</referencedby>
        <referencedby refid="cJSON_8c_1a27a7a4fb786cb7fa289dbf83889f3c99" compoundref="cJSON_8c" startline="2123" endline="2133">cJSON_AddNumberToObject</referencedby>
        <referencedby refid="cJSON_8c_1a7fedf1f410515d88917f6086048d3064" compoundref="cJSON_8c" startline="2159" endline="2169">cJSON_AddObjectToObject</referencedby>
        <referencedby refid="cJSON_8c_1a20d19c3672d259d001dbc352b02539e9" compoundref="cJSON_8c" startline="2147" endline="2157">cJSON_AddRawToObject</referencedby>
        <referencedby refid="cJSON_8c_1aec47eaefc2d022a9d53d172899e27a2e" compoundref="cJSON_8c" startline="2135" endline="2145">cJSON_AddStringToObject</referencedby>
        <referencedby refid="cJSON_8c_1a08bd4e0d459e39b20ad737acdb110adc" compoundref="cJSON_8c" startline="2087" endline="2097">cJSON_AddTrueToObject</referencedby>
        <referencedby refid="compare__tests_8c_1a85a35043b591b7cc9aa0ce025f7b6850" compoundref="compare__tests_8c" startline="121" endline="139">cjson_compare_should_compare_raw</referencedby>
        <referencedby refid="misc__tests_8c_1aabf3532394819d472abff8f322670832" compoundref="misc__tests_8c" startline="532" endline="547">cjson_create_array_reference_should_create_an_array_reference</referencedby>
        <referencedby refid="misc__tests_8c_1a0ae3705414c90d50e3c2a19ea636f144" compoundref="misc__tests_8c" startline="514" endline="530">cjson_create_object_reference_should_create_an_object_reference</referencedby>
        <referencedby refid="misc__tests_8c_1af0b06ef3eb2d4a70d1ae8f0e15319250" compoundref="misc__tests_8c" startline="504" endline="512">cjson_create_string_reference_should_create_a_string_reference</referencedby>
        <referencedby refid="cJSON_8c_1a04cb41ee475a68bd2ee63e92d8534049" compoundref="cJSON_8c" startline="2616" endline="2654">cJSON_CreateDoubleArray</referencedby>
        <referencedby refid="cJSON_8c_1a328fe12c04efcf2073b218bbf35ac6ec" compoundref="cJSON_8c" startline="2576" endline="2614">cJSON_CreateFloatArray</referencedby>
        <referencedby refid="cJSON_8c_1a12576edcea9baca64be6fe7a6ae8d4fa" compoundref="cJSON_8c" startline="2536" endline="2574">cJSON_CreateIntArray</referencedby>
        <referencedby refid="cJSON_8c_1a57b09346ba8bf22a1ef6198258f12e20" compoundref="cJSON_8c" startline="2496" endline="2511">cJSON_CreateRaw</referencedby>
        <referencedby refid="cJSON_8c_1a5987bbc1c94d9f602d719a4015ff0e6c" compoundref="cJSON_8c" startline="2446" endline="2461">cJSON_CreateString</referencedby>
        <referencedby refid="cJSON_8c_1a1419ae039480a44d0bf2fcfe30d75cc6" compoundref="cJSON_8c" startline="2656" endline="2694">cJSON_CreateStringArray</referencedby>
        <referencedby refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</referencedby>
        <referencedby refid="misc__tests_8c_1a658c34a7906299a70100225956260653" compoundref="misc__tests_8c" startline="584" endline="616">cjson_delete_item_from_array_should_not_broken_list_structure</referencedby>
        <referencedby refid="cJSON_8c_1a2b08ee3d172cb94e9abea1e4031a366f" compoundref="cJSON_8c" startline="2229" endline="2232">cJSON_DeleteItemFromArray</referencedby>
        <referencedby refid="cJSON_8c_1a148a56617a2a97921d9b9dfbe5dc85bf" compoundref="cJSON_8c" startline="2248" endline="2251">cJSON_DeleteItemFromObject</referencedby>
        <referencedby refid="cJSON_8c_1a65893174ab9ffa37a7896e9aa7461975" compoundref="cJSON_8c" startline="2253" endline="2256">cJSON_DeleteItemFromObjectCaseSensitive</referencedby>
        <referencedby refid="cJSON_8c_1a010fe0dd2606bdfafc7eb0123b20222e" compoundref="cJSON_8c" startline="2697" endline="2778">cJSON_Duplicate</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1adad67e1a420e2a1154ff2c1285344a68" compoundref="misc__tests_8c" startline="491" endline="502">cjson_get_number_value_should_get_a_number</referencedby>
        <referencedby refid="misc__tests_8c_1abe19814f80199e414e440866b87c9402" compoundref="misc__tests_8c" startline="99" endline="128">cjson_get_object_item_case_sensitive_should_get_object_items</referencedby>
        <referencedby refid="misc__tests_8c_1a9e6fc6d9566d4f6addc4e911c5d4a9a7" compoundref="misc__tests_8c" startline="141" endline="150">cjson_get_object_item_case_sensitive_should_not_crash_with_array</referencedby>
        <referencedby refid="misc__tests_8c_1a7747c301507939a00a1f4ba0d9cd2a39" compoundref="misc__tests_8c" startline="67" endline="97">cjson_get_object_item_should_get_object_items</referencedby>
        <referencedby refid="misc__tests_8c_1a8df4d7a2abdf8f913602b5e5c88fd6ee" compoundref="misc__tests_8c" startline="130" endline="139">cjson_get_object_item_should_not_crash_with_array</referencedby>
        <referencedby refid="misc__tests_8c_1ad06488176ff6cbce7db1e99b02f8394d" compoundref="misc__tests_8c" startline="478" endline="489">cjson_get_string_value_should_get_a_string</referencedby>
        <referencedby refid="cJSON_8c_1af72a0b4e3c59e7053859c0c0fe4fcda3" compoundref="cJSON_8c" startline="1091" endline="1168">cJSON_ParseWithLengthOpts</referencedby>
        <referencedby refid="misc__tests_8c_1a2625be0fc51f0e946d292e1d37505ce4" compoundref="misc__tests_8c" startline="330" endline="350">cjson_replace_item_in_object_should_preserve_name</referencedby>
        <referencedby refid="cJSON_8c_1a47bb96e61883eafa3f5d359ce5dd6509" compoundref="cJSON_8c" startline="2288" endline="2335">cJSON_ReplaceItemViaPointer</referencedby>
        <referencedby refid="misc__tests_8c_1a06e02ea5758a010882e0e97d94438c18" compoundref="misc__tests_8c" startline="618" endline="651">cjson_set_valuestring_to_object_should_not_leak_memory</referencedby>
        <referencedby refid="misc__utils__tests_8c_1a78a9e6deb564e73bdb8d641a59456898" compoundref="misc__utils__tests_8c" startline="32" endline="71">cjson_utils_functions_shouldnt_crash_with_null_pointers</referencedby>
        <referencedby refid="json__patch__tests_8c_1abbc693b8de514de60a2b6f29595b5bec" compoundref="json__patch__tests_8c" startline="217" endline="232">cjson_utils_should_pass_json_patch_test_cjson_utils_tests</referencedby>
        <referencedby refid="json__patch__tests_8c_1a8ed8babcc021e552bdbad201bd00eb07" compoundref="json__patch__tests_8c" startline="200" endline="215">cjson_utils_should_pass_json_patch_test_spec_tests</referencedby>
        <referencedby refid="json__patch__tests_8c_1a80ff9086f3f44fd28e13e55ecf5378c6" compoundref="json__patch__tests_8c" startline="183" endline="198">cjson_utils_should_pass_json_patch_test_tests</referencedby>
        <referencedby refid="compare__tests_8c_1a3e7af6bf4c2d42bcd521dd3783e75998" compoundref="compare__tests_8c" startline="27" endline="44">compare_from_string</referencedby>
        <referencedby refid="readme__examples_8c_1ab10b3b636031ab2ee2c74f1718760d03" compoundref="readme__examples_8c" startline="45" endline="115">create_monitor</referencedby>
        <referencedby refid="readme__examples_8c_1a3df44a6d83f425696bde276722b71b5f" compoundref="readme__examples_8c" startline="117" endline="166">create_monitor_with_helpers</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
        <referencedby refid="parse__examples_8c_1a4fbda33e341c1283f821d7282319ee73" compoundref="parse__examples_8c" startline="46" endline="107">do_test</referencedby>
        <referencedby refid="parse__examples_8c_1a4c9096820a56c3fc969b25e159e34c83" compoundref="parse__examples_8c" startline="134" endline="155">file_test6_should_not_be_parsed</referencedby>
        <referencedby refid="cJSON__Utils_8c_1aadd3bcea1f78c5f4cd4e0b794b62806f" compoundref="cJSON__Utils_8c" startline="1390" endline="1470">generate_merge_patch</referencedby>
        <referencedby refid="old__utils__tests_8c_1adb6b0c8e83b5b398535412ed78af6616" compoundref="old__utils__tests_8c" startline="192" endline="212">generate_merge_tests</referencedby>
        <referencedby refid="old__utils__tests_8c_1a5b450637565a7e09b4fc5cbf6bad28e2" compoundref="old__utils__tests_8c" startline="52" endline="86">json_pointer_tests</referencedby>
        <referencedby refid="cjson__read__fuzzer_8c_1a91ce7c16e9840492202299da2b451e60" compoundref="cjson__read__fuzzer_8c" startline="13" endline="72">LLVMFuzzerTestOneInput</referencedby>
        <referencedby refid="afl_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="afl_8c" startline="85" endline="176">main</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a0a9688491653ffc21762a397ee028693" compoundref="cJSON__Utils_8c" startline="1321" endline="1378">merge_patch</referencedby>
        <referencedby refid="old__utils__tests_8c_1aa1bbd39feda45d95a138a2ad6f7ee52b" compoundref="old__utils__tests_8c" startline="168" endline="190">merge_tests</referencedby>
        <referencedby refid="old__utils__tests_8c_1a5eef89c8012b160e542da762a24a15a1" compoundref="old__utils__tests_8c" startline="88" endline="136">misc_tests</referencedby>
        <referencedby refid="cJSON__Utils_8c_1acf685df049535cc95f2e66759cfe057e" compoundref="cJSON__Utils_8c" startline="784" endline="805">overwrite_item</referencedby>
        <referencedby refid="cJSON_8c_1a367cc7ac5a592211d9f18dc02dd23069" compoundref="cJSON_8c" startline="1437" endline="1532">parse_array</referencedby>
        <referencedby refid="cJSON_8c_1a1472ac5d1becd7d9a5e558b4c053b06a" compoundref="cJSON_8c" startline="1597" endline="1707">parse_object</referencedby>
        <referencedby refid="parse__with__opts_8c_1acb959452425ce2bf1aa1396879b99ef0" compoundref="parse__with__opts_8c" startline="27" endline="37">parse_with_opts_should_handle_null</referencedby>
        <referencedby refid="parse__with__opts_8c_1a71a233b608f7216650144d100ef405e9" compoundref="parse__with__opts_8c" startline="84" endline="98">parse_with_opts_should_parse_utf8_bom</referencedby>
        <referencedby refid="parse__with__opts_8c_1a074a88b31ed3cf8062ffd0f5b04d853e" compoundref="parse__with__opts_8c" startline="62" endline="71">parse_with_opts_should_require_null_if_requested</referencedby>
        <referencedby refid="parse__with__opts_8c_1ae9d7543cb34dd5b96a4d5ba2a3ef7610" compoundref="parse__with__opts_8c" startline="73" endline="82">parse_with_opts_should_return_parse_end</referencedby>
        <referencedby refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" compoundref="common_8h" startline="29" endline="44">reset</referencedby>
        <referencedby refid="old__utils__tests_8c_1ac65d33ddd0ff0a5284ecbbd589bcb6ce" compoundref="old__utils__tests_8c" startline="138" endline="166">sort_tests</referencedby>
        <referencedby refid="readme__examples_8c_1aac8a48367d8eb50de4be9aa823415b34" compoundref="readme__examples_8c" startline="169" endline="215">supports_full_hd</referencedby>
        <referencedby refid="parse__examples_8c_1a224e3135fe2fe492a791e9e28954c28e" compoundref="parse__examples_8c" startline="182" endline="196">test12_should_not_be_parsed</referencedby>
        <referencedby refid="parse__examples_8c_1a3ce7be2354d50797d4bff7e17e473e38" compoundref="parse__examples_8c" startline="198" endline="225">test13_should_be_parsed_without_null_termination</referencedby>
        <referencedby refid="parse__examples_8c_1aa7d4fb1ee4ed7c0889b38bdbf883c15e" compoundref="parse__examples_8c" startline="227" endline="251">test14_should_not_be_parsed</referencedby>
        <referencedby refid="json__patch__tests_8c_1a3ae4cfc74fe6a5fac249299f229e8ab7" compoundref="json__patch__tests_8c" startline="49" endline="120">test_apply_patch</referencedby>
        <referencedby refid="json__patch__tests_8c_1aa59e85969b210bbc43f2105bb522c73a" compoundref="json__patch__tests_8c" startline="122" endline="181">test_generate_test</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a3ed7a207e8a936fd77f6a1c1d517f458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cJSON_GetArraySize</definition>
        <argsstring>(const cJSON *array)</argsstring>
        <name>cJSON_GetArraySize</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="168" column="7" bodyfile="cJSON.c" bodystart="1824" bodyend="1845" declfile="cJSON.h" declline="168" declcolumn="7"/>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="structcJSON_1ade862b880379b5e2a591f7326401fa8d" compoundref="cJSON_8h" startline="106">cJSON::next</references>
        <references refid="unity__output__Spy_8c_1a439227feff9d7f55384e8780cfc2eb82" compoundref="unity__output__Spy_8c" startline="15">size</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1add24a177049a26b6933318a95177e114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_GetArrayItem</definition>
        <argsstring>(const cJSON *array, int index)</argsstring>
        <name>cJSON_GetArrayItem</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="170" column="10" bodyfile="cJSON.c" bodystart="1866" bodyend="1874" declfile="cJSON.h" declline="170" declcolumn="10"/>
        <references refid="cJSON_8c_1a82f460889bcb63ee840fc821feef5aa5" compoundref="cJSON_8c" startline="1847" endline="1864">get_array_item</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="old__utils__tests_8c_1a5eef89c8012b160e542da762a24a15a1" compoundref="old__utils__tests_8c" startline="88" endline="136">misc_tests</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1af2319add4b386eb74159ab4d8ed0695d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_GetObjectItem</definition>
        <argsstring>(const cJSON *const object, const char *const string)</argsstring>
        <name>cJSON_GetObjectItem</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="172" column="10" bodyfile="cJSON.c" bodystart="1908" bodyend="1911" declfile="cJSON.h" declline="172" declcolumn="10"/>
        <references refid="cJSON_8c_1a768303890e9be802d51b0e0a110302f4" compoundref="cJSON_8c" startline="1876" endline="1906">get_object_item</references>
        <referencedby refid="cJSON_8c_1a7010822d267256f274e0adf22be2b202" compoundref="cJSON_8c" startline="2234" endline="2239">cJSON_DetachItemFromObject</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1a7747c301507939a00a1f4ba0d9cd2a39" compoundref="misc__tests_8c" startline="67" endline="97">cjson_get_object_item_should_get_object_items</referencedby>
        <referencedby refid="misc__tests_8c_1a8df4d7a2abdf8f913602b5e5c88fd6ee" compoundref="misc__tests_8c" startline="130" endline="139">cjson_get_object_item_should_not_crash_with_array</referencedby>
        <referencedby refid="cJSON_8c_1af98a544a2cf11887b5d8677833271e2e" compoundref="cJSON_8c" startline="1918" endline="1921">cJSON_HasObjectItem</referencedby>
        <referencedby refid="misc__tests_8c_1a06e02ea5758a010882e0e97d94438c18" compoundref="misc__tests_8c" startline="618" endline="651">cjson_set_valuestring_to_object_should_not_leak_memory</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a1bcd9b566a44f40998eee63918e67270" compoundref="cJSON__Utils_8c" startline="742" endline="781">decode_patch_operation</referencedby>
        <referencedby refid="old__utils__tests_8c_1a5b450637565a7e09b4fc5cbf6bad28e2" compoundref="old__utils__tests_8c" startline="52" endline="86">json_pointer_tests</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a8be913fd1cb9ccf9672afcc3cdac35d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_GetObjectItemCaseSensitive</definition>
        <argsstring>(const cJSON *const object, const char *const string)</argsstring>
        <name>cJSON_GetObjectItemCaseSensitive</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="173" column="10" bodyfile="cJSON.c" bodystart="1913" bodyend="1916" declfile="cJSON.h" declline="173" declcolumn="10"/>
        <references refid="cJSON_8c_1a768303890e9be802d51b0e0a110302f4" compoundref="cJSON_8c" startline="1876" endline="1906">get_object_item</references>
        <referencedby refid="cjson__add_8c_1a68aad8702c7daab6b0aced5ed76a15bf" compoundref="cjson__add_8c" startline="390" endline="400">cJSON_add_array_should_add_array</referencedby>
        <referencedby refid="cjson__add_8c_1a906dee347b143ba380bd5c35dd2b5c11" compoundref="cjson__add_8c" startline="200" endline="217">cjson_add_bool_should_add_bool</referencedby>
        <referencedby refid="cjson__add_8c_1ae7ee5f05d3311d2480865aaa71c128f0" compoundref="cjson__add_8c" startline="164" endline="175">cjson_add_false_should_add_false</referencedby>
        <referencedby refid="cjson__add_8c_1a31a2dc3dfe049283ebaea153555f443f" compoundref="cjson__add_8c" startline="48" endline="59">cjson_add_null_should_add_null</referencedby>
        <referencedby refid="cjson__add_8c_1a90630b9261ccf9f102de52bb85d1dda3" compoundref="cjson__add_8c" startline="242" endline="256">cjson_add_number_should_add_number</referencedby>
        <referencedby refid="cjson__add_8c_1a9098c85ee9dd963cfc682ab328932707" compoundref="cjson__add_8c" startline="355" endline="365">cJSON_add_object_should_add_object</referencedby>
        <referencedby refid="cjson__add_8c_1aad320d705b69a79d3797b02db41b8335" compoundref="cjson__add_8c" startline="318" endline="330">cjson_add_raw_should_add_raw</referencedby>
        <referencedby refid="cjson__add_8c_1a79abc4fe5667eded0df91b5320edbf85" compoundref="cjson__add_8c" startline="281" endline="293">cjson_add_string_should_add_string</referencedby>
        <referencedby refid="cjson__add_8c_1a2f02038182067b35da56b958618caa6f" compoundref="cjson__add_8c" startline="84" endline="95">cjson_add_true_should_add_true</referencedby>
        <referencedby refid="cJSON_8c_1a75ab57d1dfc9dca274bf713fca641ba1" compoundref="cJSON_8c" startline="2241" endline="2246">cJSON_DetachItemFromObjectCaseSensitive</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1abe19814f80199e414e440866b87c9402" compoundref="misc__tests_8c" startline="99" endline="128">cjson_get_object_item_case_sensitive_should_get_object_items</referencedby>
        <referencedby refid="misc__tests_8c_1a9e6fc6d9566d4f6addc4e911c5d4a9a7" compoundref="misc__tests_8c" startline="141" endline="150">cjson_get_object_item_case_sensitive_should_not_crash_with_array</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a1bcd9b566a44f40998eee63918e67270" compoundref="cJSON__Utils_8c" startline="742" endline="781">decode_patch_operation</referencedby>
        <referencedby refid="readme__examples_8c_1aac8a48367d8eb50de4be9aa823415b34" compoundref="readme__examples_8c" startline="169" endline="215">supports_full_hd</referencedby>
        <referencedby refid="json__patch__tests_8c_1a3ae4cfc74fe6a5fac249299f229e8ab7" compoundref="json__patch__tests_8c" startline="49" endline="120">test_apply_patch</referencedby>
        <referencedby refid="json__patch__tests_8c_1aa59e85969b210bbc43f2105bb522c73a" compoundref="json__patch__tests_8c" startline="122" endline="181">test_generate_test</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1af98a544a2cf11887b5d8677833271e2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_HasObjectItem</definition>
        <argsstring>(const cJSON *object, const char *string)</argsstring>
        <name>cJSON_HasObjectItem</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="174" column="14" bodyfile="cJSON.c" bodystart="1918" bodyend="1921" declfile="cJSON.h" declline="174" declcolumn="14"/>
        <references refid="cJSON_8c_1af2319add4b386eb74159ab4d8ed0695d" compoundref="cJSON_8c" startline="1908" endline="1911">cJSON_GetObjectItem</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a5e81ffc372644963c759103865b0cad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* cJSON_GetErrorPtr</definition>
        <argsstring>(void)</argsstring>
        <name>cJSON_GetErrorPtr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="176" column="15" bodyfile="cJSON.c" bodystart="94" bodyend="97" declfile="cJSON.h" declline="176" declcolumn="15"/>
        <references refid="cJSON_8c_1a6ff6e9678e47cf5347872008661d5846" compoundref="cJSON_8c" startline="92">global_error</references>
        <references refid="structerror_1a9b123855d5dd48e86de846588462b39f" compoundref="cJSON_8c" startline="89">error::json</references>
        <references refid="structerror_1a24de70a4d517ab351d80c18582cadb66" compoundref="cJSON_8c" startline="90">error::position</references>
        <referencedby refid="parse__examples_8c_1a4c9096820a56c3fc969b25e159e34c83" compoundref="parse__examples_8c" startline="134" endline="155">file_test6_should_not_be_parsed</referencedby>
        <referencedby refid="parse__with__opts_8c_1a19ac84ade92023d69bca3f2142a16eae" compoundref="parse__with__opts_8c" startline="39" endline="50">parse_with_opts_should_handle_empty_strings</referencedby>
        <referencedby refid="parse__with__opts_8c_1a206139bc647d25a319796c17e34aaaa2" compoundref="parse__with__opts_8c" startline="52" endline="60">parse_with_opts_should_handle_incomplete_json</referencedby>
        <referencedby refid="readme__examples_8c_1aac8a48367d8eb50de4be9aa823415b34" compoundref="readme__examples_8c" startline="169" endline="215">supports_full_hd</referencedby>
        <referencedby refid="parse__examples_8c_1a224e3135fe2fe492a791e9e28954c28e" compoundref="parse__examples_8c" startline="182" endline="196">test12_should_not_be_parsed</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a8f13476fa43d33e3e6439b564af5c5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* cJSON_GetStringValue</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_GetStringValue</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="179" column="9" bodyfile="cJSON.c" bodystart="99" bodyend="107" declfile="cJSON.h" declline="179" declcolumn="9"/>
        <references refid="cJSON_8c_1a87b7cb8032c9a552995e006f65f49cb5" compoundref="cJSON_8c" startline="2937" endline="2945">cJSON_IsString</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" compoundref="cJSON_8h" startline="115">cJSON::valuestring</references>
        <referencedby refid="misc__tests_8c_1ad06488176ff6cbce7db1e99b02f8394d" compoundref="misc__tests_8c" startline="478" endline="489">cjson_get_string_value_should_get_a_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a894042068cc1b20996bc7800700a9df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double cJSON_GetNumberValue</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_GetNumberValue</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="180" column="10" bodyfile="cJSON.c" bodystart="109" bodyend="117" declfile="cJSON.h" declline="180" declcolumn="10"/>
        <references refid="cJSON_8c_1a04148f2da6d47885c7498cfbf521a74d" compoundref="cJSON_8c" startline="2927" endline="2935">cJSON_IsNumber</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="cJSON_8c_1a8abfcc76130f3f991d124dd22d7e69bc" compoundref="cJSON_8c" startline="84">NAN</references>
        <references refid="structcJSON_1a4b21817d0fd2919901abadac73214e7f" compoundref="cJSON_8h" startline="119">cJSON::valuedouble</references>
        <referencedby refid="misc__tests_8c_1adad67e1a420e2a1154ff2c1285344a68" compoundref="misc__tests_8c" startline="491" endline="502">cjson_get_number_value_should_get_a_number</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a49373f6a455b8b99443b9c170b787e86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_IsInvalid</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_IsInvalid</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="183" column="14" bodyfile="cJSON.c" bodystart="2877" bodyend="2885" declfile="cJSON.h" declline="183" declcolumn="14"/>
        <references refid="cJSON_8h_1a80c36e86d8d65b697bc623fe28027668" compoundref="cJSON_8h" startline="89">cJSON_Invalid</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="cJSON_8c_1a42801ee95f281ee07fe132dee8abce6b" compoundref="cJSON_8c" startline="2977" endline="3100">cJSON_Compare</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1af0db23c93ab585bd85cffb9b550ea4cd" compoundref="misc__tests_8c" startline="152" endline="206">typecheck_functions_should_check_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a160f9c97b2e63c46dcdc192e3de9274d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_IsFalse</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_IsFalse</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="184" column="14" bodyfile="cJSON.c" bodystart="2887" bodyend="2895" declfile="cJSON.h" declline="184" declcolumn="14"/>
        <references refid="cJSON_8h_1a2d240682316354b5748f909ad220184b" compoundref="cJSON_8h" startline="90">cJSON_False</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1af0db23c93ab585bd85cffb9b550ea4cd" compoundref="misc__tests_8c" startline="152" endline="206">typecheck_functions_should_check_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a4ad6de706aeece32cdb6348ba3e390f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_IsTrue</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_IsTrue</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="185" column="14" bodyfile="cJSON.c" bodystart="2897" bodyend="2905" declfile="cJSON.h" declline="185" declcolumn="14"/>
        <references refid="cJSON_8h_1aad4e442b8095939decddfb67d87d9324" compoundref="cJSON_8h" startline="91">cJSON_True</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="json__patch__tests_8c_1a3ae4cfc74fe6a5fac249299f229e8ab7" compoundref="json__patch__tests_8c" startline="49" endline="120">test_apply_patch</referencedby>
        <referencedby refid="json__patch__tests_8c_1aa59e85969b210bbc43f2105bb522c73a" compoundref="json__patch__tests_8c" startline="122" endline="181">test_generate_test</referencedby>
        <referencedby refid="misc__tests_8c_1af0db23c93ab585bd85cffb9b550ea4cd" compoundref="misc__tests_8c" startline="152" endline="206">typecheck_functions_should_check_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a16bbe75ed6f97d121c141e4fec38d497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_IsBool</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_IsBool</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="186" column="14" bodyfile="cJSON.c" bodystart="2908" bodyend="2916" declfile="cJSON.h" declline="186" declcolumn="14"/>
        <references refid="cJSON_8h_1a2d240682316354b5748f909ad220184b" compoundref="cJSON_8h" startline="90">cJSON_False</references>
        <references refid="cJSON_8h_1aad4e442b8095939decddfb67d87d9324" compoundref="cJSON_8h" startline="91">cJSON_True</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1af0db23c93ab585bd85cffb9b550ea4cd" compoundref="misc__tests_8c" startline="152" endline="206">typecheck_functions_should_check_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a7e941f0d623c8476b6a10e9b05464f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_IsNull</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_IsNull</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="187" column="14" bodyfile="cJSON.c" bodystart="2917" bodyend="2925" declfile="cJSON.h" declline="187" declcolumn="14"/>
        <references refid="cJSON_8h_1aeadaba63ddb68aaa518528595d503dcd" compoundref="cJSON_8h" startline="92">cJSON_NULL</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a0a9688491653ffc21762a397ee028693" compoundref="cJSON__Utils_8c" startline="1321" endline="1378">merge_patch</referencedby>
        <referencedby refid="misc__tests_8c_1af0db23c93ab585bd85cffb9b550ea4cd" compoundref="misc__tests_8c" startline="152" endline="206">typecheck_functions_should_check_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a04148f2da6d47885c7498cfbf521a74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_IsNumber</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_IsNumber</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="188" column="14" bodyfile="cJSON.c" bodystart="2927" bodyend="2935" declfile="cJSON.h" declline="188" declcolumn="14"/>
        <references refid="cJSON_8h_1a15e77e2f6457dc9b19c10ddb032af971" compoundref="cJSON_8h" startline="93">cJSON_Number</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="misc__tests_8c_1aabf3532394819d472abff8f322670832" compoundref="misc__tests_8c" startline="532" endline="547">cjson_create_array_reference_should_create_an_array_reference</referencedby>
        <referencedby refid="misc__tests_8c_1a0ae3705414c90d50e3c2a19ea636f144" compoundref="misc__tests_8c" startline="514" endline="530">cjson_create_object_reference_should_create_an_object_reference</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON_8c_1a894042068cc1b20996bc7800700a9df0" compoundref="cJSON_8c" startline="109" endline="117">cJSON_GetNumberValue</referencedby>
        <referencedby refid="readme__examples_8c_1aac8a48367d8eb50de4be9aa823415b34" compoundref="readme__examples_8c" startline="169" endline="215">supports_full_hd</referencedby>
        <referencedby refid="misc__tests_8c_1af0db23c93ab585bd85cffb9b550ea4cd" compoundref="misc__tests_8c" startline="152" endline="206">typecheck_functions_should_check_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a87b7cb8032c9a552995e006f65f49cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_IsString</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_IsString</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="189" column="14" bodyfile="cJSON.c" bodystart="2937" bodyend="2945" declfile="cJSON.h" declline="189" declcolumn="14"/>
        <references refid="cJSON_8h_1aa2cb4765308e2bbdf01988b2acdf92d9" compoundref="cJSON_8h" startline="94">cJSON_String</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="cJSON__Utils_8c_1ae7f4ca7c392e544cb2fb6ff04af7a7ab" compoundref="cJSON__Utils_8c" startline="807" endline="1036">apply_patch</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON_8c_1a8f13476fa43d33e3e6439b564af5c5e0" compoundref="cJSON_8c" startline="99" endline="107">cJSON_GetStringValue</referencedby>
        <referencedby refid="readme__examples_8c_1aac8a48367d8eb50de4be9aa823415b34" compoundref="readme__examples_8c" startline="169" endline="215">supports_full_hd</referencedby>
        <referencedby refid="json__patch__tests_8c_1a3ae4cfc74fe6a5fac249299f229e8ab7" compoundref="json__patch__tests_8c" startline="49" endline="120">test_apply_patch</referencedby>
        <referencedby refid="misc__tests_8c_1af0db23c93ab585bd85cffb9b550ea4cd" compoundref="misc__tests_8c" startline="152" endline="206">typecheck_functions_should_check_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a3e8d0723e3be479074c45008f5cd3497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_IsArray</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_IsArray</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="190" column="14" bodyfile="cJSON.c" bodystart="2947" bodyend="2955" declfile="cJSON.h" declline="190" declcolumn="14"/>
        <references refid="cJSON_8h_1a57cffa126740a8efcdcb7bcef80e8897" compoundref="cJSON_8h" startline="95">cJSON_Array</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="cJSON__Utils_8c_1ae7f4ca7c392e544cb2fb6ff04af7a7ab" compoundref="cJSON__Utils_8c" startline="807" endline="1036">apply_patch</referencedby>
        <referencedby refid="misc__tests_8c_1aabf3532394819d472abff8f322670832" compoundref="misc__tests_8c" startline="532" endline="547">cjson_create_array_reference_should_create_an_array_reference</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a641cb4552c85b29763cd604be0b3e2e1" compoundref="cJSON__Utils_8c" startline="1038" endline="1065">cJSONUtils_ApplyPatches</referencedby>
        <referencedby refid="cJSON__Utils_8c_1aedc0555c83da63f2cf2418ed371cfcab" compoundref="cJSON__Utils_8c" startline="1067" endline="1094">cJSONUtils_ApplyPatchesCaseSensitive</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a77e7485a5ded70768f9deb7ccde950bd" compoundref="cJSON__Utils_8c" startline="198" endline="259">cJSONUtils_FindPointerFromObjectTo</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a53302772bf80ab32f501e603ffe9ac98" compoundref="cJSON__Utils_8c" startline="430" endline="481">detach_path</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a3a675e027f14a993c43dd5397897798b" compoundref="cJSON__Utils_8c" startline="301" endline="346">get_item_from_pointer</referencedby>
        <referencedby refid="json__patch__tests_8c_1a9ae7df22687b441f77b603d26e50cf93" compoundref="json__patch__tests_8c" startline="32" endline="47">parse_test_file</referencedby>
        <referencedby refid="misc__tests_8c_1af0db23c93ab585bd85cffb9b550ea4cd" compoundref="misc__tests_8c" startline="152" endline="206">typecheck_functions_should_check_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a23baebcbfa93b56edb9e6b6f303f521b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_IsObject</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_IsObject</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="191" column="14" bodyfile="cJSON.c" bodystart="2957" bodyend="2965" declfile="cJSON.h" declline="191" declcolumn="14"/>
        <references refid="cJSON_8h_1a22c6e13481c090629afbd77b7cebd24c" compoundref="cJSON_8h" startline="96">cJSON_Object</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="cJSON__Utils_8c_1ae7f4ca7c392e544cb2fb6ff04af7a7ab" compoundref="cJSON__Utils_8c" startline="807" endline="1036">apply_patch</referencedby>
        <referencedby refid="misc__tests_8c_1a0ae3705414c90d50e3c2a19ea636f144" compoundref="misc__tests_8c" startline="514" endline="530">cjson_create_object_reference_should_create_an_object_reference</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a77e7485a5ded70768f9deb7ccde950bd" compoundref="cJSON__Utils_8c" startline="198" endline="259">cJSONUtils_FindPointerFromObjectTo</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a53302772bf80ab32f501e603ffe9ac98" compoundref="cJSON__Utils_8c" startline="430" endline="481">detach_path</referencedby>
        <referencedby refid="cJSON__Utils_8c_1aadd3bcea1f78c5f4cd4e0b794b62806f" compoundref="cJSON__Utils_8c" startline="1390" endline="1470">generate_merge_patch</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a3a675e027f14a993c43dd5397897798b" compoundref="cJSON__Utils_8c" startline="301" endline="346">get_item_from_pointer</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a0a9688491653ffc21762a397ee028693" compoundref="cJSON__Utils_8c" startline="1321" endline="1378">merge_patch</referencedby>
        <referencedby refid="misc__tests_8c_1af0db23c93ab585bd85cffb9b550ea4cd" compoundref="misc__tests_8c" startline="152" endline="206">typecheck_functions_should_check_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a9fc519447ecd559e84bdd3b634162ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_IsRaw</definition>
        <argsstring>(const cJSON *const item)</argsstring>
        <name>cJSON_IsRaw</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="192" column="14" bodyfile="cJSON.c" bodystart="2967" bodyend="2975" declfile="cJSON.h" declline="192" declcolumn="14"/>
        <references refid="cJSON_8h_1ae9ddc931ea84908d12f48c5b7f8731a1" compoundref="cJSON_8h" startline="97">cJSON_Raw</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1af0db23c93ab585bd85cffb9b550ea4cd" compoundref="misc__tests_8c" startline="152" endline="206">typecheck_functions_should_check_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a83ea2a0b33071a1120b9052170a2bc13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateNull</definition>
        <argsstring>(void)</argsstring>
        <name>cJSON_CreateNull</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="195" column="10" bodyfile="cJSON.c" bodystart="2376" bodyend="2385" declfile="cJSON.h" declline="195" declcolumn="10"/>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8h_1aeadaba63ddb68aaa518528595d503dcd" compoundref="cJSON_8h" startline="92">cJSON_NULL</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="cJSON_8c_1a6e425c8aa8e9577cb4511a6be0959d9a" compoundref="cJSON_8c" startline="2075" endline="2085">cJSON_AddNullToObject</referencedby>
        <referencedby refid="misc__tests_8c_1ac96bb79bdea45dc66f6d11a70f8f4e15" compoundref="misc__tests_8c" startline="283" endline="328">cjson_replace_item_via_pointer_should_replace_items</referencedby>
        <referencedby refid="cJSON__Utils_8c_1aadd3bcea1f78c5f4cd4e0b794b62806f" compoundref="cJSON__Utils_8c" startline="1390" endline="1470">generate_merge_patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a07b3d4616c5a682aa558180713ce858a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateTrue</definition>
        <argsstring>(void)</argsstring>
        <name>cJSON_CreateTrue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="196" column="10" bodyfile="cJSON.c" bodystart="2387" bodyend="2396" declfile="cJSON.h" declline="196" declcolumn="10"/>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8h_1aad4e442b8095939decddfb67d87d9324" compoundref="cJSON_8h" startline="91">cJSON_True</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="cJSON_8c_1a08bd4e0d459e39b20ad737acdb110adc" compoundref="cJSON_8c" startline="2087" endline="2097">cJSON_AddTrueToObject</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a33dcdd4d4f5da12bc91372376908c42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateFalse</definition>
        <argsstring>(void)</argsstring>
        <name>cJSON_CreateFalse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="197" column="10" bodyfile="cJSON.c" bodystart="2398" bodyend="2407" declfile="cJSON.h" declline="197" declcolumn="10"/>
        <references refid="cJSON_8h_1a2d240682316354b5748f909ad220184b" compoundref="cJSON_8h" startline="90">cJSON_False</references>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="cJSON_8c_1ad162d48e83915525082bcbeed6262d91" compoundref="cJSON_8c" startline="2099" endline="2109">cJSON_AddFalseToObject</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a859fe1cf8203f2d0131d388f7b1178f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateBool</definition>
        <argsstring>(cJSON_bool boolean)</argsstring>
        <name>cJSON_CreateBool</name>
        <param>
          <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
          <declname>boolean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="198" column="10" bodyfile="cJSON.c" bodystart="2409" bodyend="2418" declfile="cJSON.h" declline="198" declcolumn="10"/>
        <references refid="cJSON_8h_1a2d240682316354b5748f909ad220184b" compoundref="cJSON_8h" startline="90">cJSON_False</references>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8h_1aad4e442b8095939decddfb67d87d9324" compoundref="cJSON_8h" startline="91">cJSON_True</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="cJSON_8c_1a421ba4c0e845aff2e4c8efcbd70d75d4" compoundref="cJSON_8c" startline="2111" endline="2121">cJSON_AddBoolToObject</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a220d076d7d3a309049d6889be6d4904a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateNumber</definition>
        <argsstring>(double num)</argsstring>
        <name>cJSON_CreateNumber</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="199" column="10" bodyfile="cJSON.c" bodystart="2420" bodyend="2444" declfile="cJSON.h" declline="199" declcolumn="10"/>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8h_1a15e77e2f6457dc9b19c10ddb032af971" compoundref="cJSON_8h" startline="93">cJSON_Number</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <references refid="structcJSON_1a4b21817d0fd2919901abadac73214e7f" compoundref="cJSON_8h" startline="119">cJSON::valuedouble</references>
        <references refid="structcJSON_1a369cea49494eb5d4409d532a731a0fbf" compoundref="cJSON_8h" startline="117">cJSON::valueint</references>
        <referencedby refid="misc__tests_8c_1afafcede9e71e151a8b580f7c479a4788" compoundref="misc__tests_8c" startline="565" endline="582">cjson_add_item_to_object_should_not_use_after_free_when_string_is_aliased</referencedby>
        <referencedby refid="cJSON_8c_1a27a7a4fb786cb7fa289dbf83889f3c99" compoundref="cJSON_8c" startline="2123" endline="2133">cJSON_AddNumberToObject</referencedby>
        <referencedby refid="misc__tests_8c_1aabf3532394819d472abff8f322670832" compoundref="misc__tests_8c" startline="532" endline="547">cjson_create_array_reference_should_create_an_array_reference</referencedby>
        <referencedby refid="misc__tests_8c_1a0ae3705414c90d50e3c2a19ea636f144" compoundref="misc__tests_8c" startline="514" endline="530">cjson_create_object_reference_should_create_an_object_reference</referencedby>
        <referencedby refid="cJSON_8c_1a04cb41ee475a68bd2ee63e92d8534049" compoundref="cJSON_8c" startline="2616" endline="2654">cJSON_CreateDoubleArray</referencedby>
        <referencedby refid="cJSON_8c_1a328fe12c04efcf2073b218bbf35ac6ec" compoundref="cJSON_8c" startline="2576" endline="2614">cJSON_CreateFloatArray</referencedby>
        <referencedby refid="cJSON_8c_1a12576edcea9baca64be6fe7a6ae8d4fa" compoundref="cJSON_8c" startline="2536" endline="2574">cJSON_CreateIntArray</referencedby>
        <referencedby refid="misc__tests_8c_1adad67e1a420e2a1154ff2c1285344a68" compoundref="misc__tests_8c" startline="491" endline="502">cjson_get_number_value_should_get_a_number</referencedby>
        <referencedby refid="misc__tests_8c_1ad06488176ff6cbce7db1e99b02f8394d" compoundref="misc__tests_8c" startline="478" endline="489">cjson_get_string_value_should_get_a_string</referencedby>
        <referencedby refid="misc__tests_8c_1a2625be0fc51f0e946d292e1d37505ce4" compoundref="misc__tests_8c" startline="330" endline="350">cjson_replace_item_in_object_should_preserve_name</referencedby>
        <referencedby refid="readme__examples_8c_1ab10b3b636031ab2ee2c74f1718760d03" compoundref="readme__examples_8c" startline="45" endline="115">create_monitor</referencedby>
        <referencedby refid="old__utils__tests_8c_1ac65d33ddd0ff0a5284ecbbd589bcb6ce" compoundref="old__utils__tests_8c" startline="138" endline="166">sort_tests</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a5987bbc1c94d9f602d719a4015ff0e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateString</definition>
        <argsstring>(const char *string)</argsstring>
        <name>cJSON_CreateString</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="200" column="10" bodyfile="cJSON.c" bodystart="2446" bodyend="2461" declfile="cJSON.h" declline="200" declcolumn="10"/>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8c_1a5da7bd9b4622e97e7e19c36017410252" compoundref="cJSON_8c" startline="188" endline="207">cJSON_strdup</references>
        <references refid="cJSON_8h_1aa2cb4765308e2bbdf01988b2acdf92d9" compoundref="cJSON_8h" startline="94">cJSON_String</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <references refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" compoundref="cJSON_8h" startline="115">cJSON::valuestring</references>
        <referencedby refid="cJSON_8c_1aec47eaefc2d022a9d53d172899e27a2e" compoundref="cJSON_8c" startline="2135" endline="2145">cJSON_AddStringToObject</referencedby>
        <referencedby refid="cJSON_8c_1a1419ae039480a44d0bf2fcfe30d75cc6" compoundref="cJSON_8c" startline="2656" endline="2694">cJSON_CreateStringArray</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1adad67e1a420e2a1154ff2c1285344a68" compoundref="misc__tests_8c" startline="491" endline="502">cjson_get_number_value_should_get_a_number</referencedby>
        <referencedby refid="misc__tests_8c_1ad06488176ff6cbce7db1e99b02f8394d" compoundref="misc__tests_8c" startline="478" endline="489">cjson_get_string_value_should_get_a_string</referencedby>
        <referencedby refid="misc__tests_8c_1a06e02ea5758a010882e0e97d94438c18" compoundref="misc__tests_8c" startline="618" endline="651">cjson_set_valuestring_to_object_should_not_leak_memory</referencedby>
        <referencedby refid="misc__utils__tests_8c_1a78a9e6deb564e73bdb8d641a59456898" compoundref="misc__utils__tests_8c" startline="32" endline="71">cjson_utils_functions_shouldnt_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON__Utils_8c_1af8cba403c61c1c77c2904176b90a1252" compoundref="cJSON__Utils_8c" startline="1096" endline="1134">compose_patch</referencedby>
        <referencedby refid="readme__examples_8c_1ab10b3b636031ab2ee2c74f1718760d03" compoundref="readme__examples_8c" startline="45" endline="115">create_monitor</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
        <referencedby refid="old__utils__tests_8c_1a5eef89c8012b160e542da762a24a15a1" compoundref="old__utils__tests_8c" startline="88" endline="136">misc_tests</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a57b09346ba8bf22a1ef6198258f12e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateRaw</definition>
        <argsstring>(const char *raw)</argsstring>
        <name>cJSON_CreateRaw</name>
        <param>
          <type>const char *</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="202" column="10" bodyfile="cJSON.c" bodystart="2496" bodyend="2511" declfile="cJSON.h" declline="202" declcolumn="10"/>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8h_1ae9ddc931ea84908d12f48c5b7f8731a1" compoundref="cJSON_8h" startline="97">cJSON_Raw</references>
        <references refid="cJSON_8c_1a5da7bd9b4622e97e7e19c36017410252" compoundref="cJSON_8c" startline="188" endline="207">cJSON_strdup</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <references refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" compoundref="cJSON_8h" startline="115">cJSON::valuestring</references>
        <referencedby refid="cJSON_8c_1a20d19c3672d259d001dbc352b02539e9" compoundref="cJSON_8c" startline="2147" endline="2157">cJSON_AddRawToObject</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a29e5808c66c1cf1f3edbf117babe07b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateArray</definition>
        <argsstring>(void)</argsstring>
        <name>cJSON_CreateArray</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="203" column="10" bodyfile="cJSON.c" bodystart="2513" bodyend="2522" declfile="cJSON.h" declline="203" declcolumn="10"/>
        <references refid="cJSON_8h_1a57cffa126740a8efcdcb7bcef80e8897" compoundref="cJSON_8h" startline="95">cJSON_Array</references>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="misc__tests_8c_1a9a9771de88a32752b40c60449e746f9d" compoundref="misc__tests_8c" startline="549" endline="563">cjson_add_item_to_object_or_array_should_not_add_itself</referencedby>
        <referencedby refid="cJSON_8c_1a9aee370d9aa8997e5a39f76a643792ed" compoundref="cJSON_8c" startline="2171" endline="2181">cJSON_AddArrayToObject</referencedby>
        <referencedby refid="misc__tests_8c_1aabf3532394819d472abff8f322670832" compoundref="misc__tests_8c" startline="532" endline="547">cjson_create_array_reference_should_create_an_array_reference</referencedby>
        <referencedby refid="cJSON_8c_1a04cb41ee475a68bd2ee63e92d8534049" compoundref="cJSON_8c" startline="2616" endline="2654">cJSON_CreateDoubleArray</referencedby>
        <referencedby refid="cJSON_8c_1a328fe12c04efcf2073b218bbf35ac6ec" compoundref="cJSON_8c" startline="2576" endline="2614">cJSON_CreateFloatArray</referencedby>
        <referencedby refid="cJSON_8c_1a12576edcea9baca64be6fe7a6ae8d4fa" compoundref="cJSON_8c" startline="2536" endline="2574">cJSON_CreateIntArray</referencedby>
        <referencedby refid="cJSON_8c_1a1419ae039480a44d0bf2fcfe30d75cc6" compoundref="cJSON_8c" startline="2656" endline="2694">cJSON_CreateStringArray</referencedby>
        <referencedby refid="misc__tests_8c_1ac96bb79bdea45dc66f6d11a70f8f4e15" compoundref="misc__tests_8c" startline="283" endline="328">cjson_replace_item_via_pointer_should_replace_items</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a33b9d8e8460ad8334278651727a27866" compoundref="cJSON__Utils_8c" startline="1281" endline="1294">cJSONUtils_GeneratePatches</referencedby>
        <referencedby refid="cJSON__Utils_8c_1ae6ffc4b4590ab520f4d44fccfcf79323" compoundref="cJSON__Utils_8c" startline="1296" endline="1309">cJSONUtils_GeneratePatchesCaseSensitive</referencedby>
        <referencedby refid="readme__examples_8c_1ab10b3b636031ab2ee2c74f1718760d03" compoundref="readme__examples_8c" startline="45" endline="115">create_monitor</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a9c5f44afdd781b16dead90042fe74085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateObject</definition>
        <argsstring>(void)</argsstring>
        <name>cJSON_CreateObject</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="204" column="10" bodyfile="cJSON.c" bodystart="2524" bodyend="2533" declfile="cJSON.h" declline="204" declcolumn="10"/>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8h_1a22c6e13481c090629afbd77b7cebd24c" compoundref="cJSON_8h" startline="96">cJSON_Object</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="cjson__add_8c_1a68aad8702c7daab6b0aced5ed76a15bf" compoundref="cjson__add_8c" startline="390" endline="400">cJSON_add_array_should_add_array</referencedby>
        <referencedby refid="cjson__add_8c_1a008722fbefd317869e031ebbabf574df" compoundref="cjson__add_8c" startline="412" endline="423">cjson_add_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1ad268e05d4df8d72c3c2a96d528b403b1" compoundref="cjson__add_8c" startline="402" endline="410">cjson_add_array_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1a906dee347b143ba380bd5c35dd2b5c11" compoundref="cjson__add_8c" startline="200" endline="217">cjson_add_bool_should_add_bool</referencedby>
        <referencedby refid="cjson__add_8c_1ad60f93569585858a582867bac944cc29" compoundref="cjson__add_8c" startline="229" endline="240">cjson_add_bool_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a216505e918c4eefab3ce964655506947" compoundref="cjson__add_8c" startline="219" endline="227">cjson_add_bool_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1ae7ee5f05d3311d2480865aaa71c128f0" compoundref="cjson__add_8c" startline="164" endline="175">cjson_add_false_should_add_false</referencedby>
        <referencedby refid="cjson__add_8c_1aa6f2cab70fbe47fe7006420d79fa76a6" compoundref="cjson__add_8c" startline="187" endline="198">cjson_add_false_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a84a509f291b16c31518e35506cdafe99" compoundref="cjson__add_8c" startline="177" endline="185">cjson_add_false_should_fail_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1a9a9771de88a32752b40c60449e746f9d" compoundref="misc__tests_8c" startline="549" endline="563">cjson_add_item_to_object_or_array_should_not_add_itself</referencedby>
        <referencedby refid="misc__tests_8c_1afafcede9e71e151a8b580f7c479a4788" compoundref="misc__tests_8c" startline="565" endline="582">cjson_add_item_to_object_should_not_use_after_free_when_string_is_aliased</referencedby>
        <referencedby refid="cjson__add_8c_1a31a2dc3dfe049283ebaea153555f443f" compoundref="cjson__add_8c" startline="48" endline="59">cjson_add_null_should_add_null</referencedby>
        <referencedby refid="cjson__add_8c_1aebf28b3f89ed1b346bd8aab639c6372c" compoundref="cjson__add_8c" startline="71" endline="82">cjson_add_null_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a52b973a8a39fce650a2dd3fb80ee5bab" compoundref="cjson__add_8c" startline="61" endline="69">cjson_add_null_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1a90630b9261ccf9f102de52bb85d1dda3" compoundref="cjson__add_8c" startline="242" endline="256">cjson_add_number_should_add_number</referencedby>
        <referencedby refid="cjson__add_8c_1acf27b6aa94c2c8d2b29152bcafd0fb89" compoundref="cjson__add_8c" startline="268" endline="279">cjson_add_number_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a83921007d8ad36822427034ca1d6aa11" compoundref="cjson__add_8c" startline="258" endline="266">cjson_add_number_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1a9098c85ee9dd963cfc682ab328932707" compoundref="cjson__add_8c" startline="355" endline="365">cJSON_add_object_should_add_object</referencedby>
        <referencedby refid="cjson__add_8c_1a185a89f8e24cac97d1cb2e4a1a8278db" compoundref="cjson__add_8c" startline="377" endline="388">cjson_add_object_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a8022426b2f978e4a9191fc8d817c2040" compoundref="cjson__add_8c" startline="367" endline="375">cjson_add_object_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1aad320d705b69a79d3797b02db41b8335" compoundref="cjson__add_8c" startline="318" endline="330">cjson_add_raw_should_add_raw</referencedby>
        <referencedby refid="cjson__add_8c_1af6881b7e57f75a6ff44ec50b2939d2da" compoundref="cjson__add_8c" startline="342" endline="353">cjson_add_raw_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a47ed6a71469c72ca1b91613b7a0babd9" compoundref="cjson__add_8c" startline="332" endline="340">cjson_add_raw_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1a79abc4fe5667eded0df91b5320edbf85" compoundref="cjson__add_8c" startline="281" endline="293">cjson_add_string_should_add_string</referencedby>
        <referencedby refid="cjson__add_8c_1a9332b1a2d2ad53a70d56eb65e5f50c8e" compoundref="cjson__add_8c" startline="305" endline="316">cjson_add_string_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a33ebaa2876583bc1ccb1641addc9c20f" compoundref="cjson__add_8c" startline="295" endline="303">cjson_add_string_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cjson__add_8c_1a2f02038182067b35da56b958618caa6f" compoundref="cjson__add_8c" startline="84" endline="95">cjson_add_true_should_add_true</referencedby>
        <referencedby refid="cjson__add_8c_1ae9470b7ad04d9da4f6ab52d2ed0222fa" compoundref="cjson__add_8c" startline="107" endline="118">cjson_add_true_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a617f9dc0ec20654d1a6be0650907f3ae" compoundref="cjson__add_8c" startline="97" endline="105">cjson_add_true_should_fail_with_null_pointers</referencedby>
        <referencedby refid="cJSON_8c_1a7fedf1f410515d88917f6086048d3064" compoundref="cJSON_8c" startline="2159" endline="2169">cJSON_AddObjectToObject</referencedby>
        <referencedby refid="misc__tests_8c_1a0ae3705414c90d50e3c2a19ea636f144" compoundref="misc__tests_8c" startline="514" endline="530">cjson_create_object_reference_should_create_an_object_reference</referencedby>
        <referencedby refid="cJSON__Utils_8c_1af8cba403c61c1c77c2904176b90a1252" compoundref="cJSON__Utils_8c" startline="1096" endline="1134">compose_patch</referencedby>
        <referencedby refid="readme__examples_8c_1ab10b3b636031ab2ee2c74f1718760d03" compoundref="readme__examples_8c" startline="45" endline="115">create_monitor</referencedby>
        <referencedby refid="readme__examples_8c_1a3df44a6d83f425696bde276722b71b5f" compoundref="readme__examples_8c" startline="117" endline="166">create_monitor_with_helpers</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
        <referencedby refid="cJSON__Utils_8c_1aadd3bcea1f78c5f4cd4e0b794b62806f" compoundref="cJSON__Utils_8c" startline="1390" endline="1470">generate_merge_patch</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a0a9688491653ffc21762a397ee028693" compoundref="cJSON__Utils_8c" startline="1321" endline="1378">merge_patch</referencedby>
        <referencedby refid="old__utils__tests_8c_1a5eef89c8012b160e542da762a24a15a1" compoundref="old__utils__tests_8c" startline="88" endline="136">misc_tests</referencedby>
        <referencedby refid="old__utils__tests_8c_1ac65d33ddd0ff0a5284ecbbd589bcb6ce" compoundref="old__utils__tests_8c" startline="138" endline="166">sort_tests</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a9cb226121d5eb9ba4aa84b1c19cbc25b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateStringReference</definition>
        <argsstring>(const char *string)</argsstring>
        <name>cJSON_CreateStringReference</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="208" column="10" bodyfile="cJSON.c" bodystart="2463" bodyend="2473" declfile="cJSON.h" declline="208" declcolumn="10"/>
        <references refid="cJSON_8c_1a48223c36735c39cfc4711b0659f966c8" compoundref="cJSON_8c" startline="1998" endline="2001">cast_away_const</references>
        <references refid="cJSON_8h_1ad3d18116aae3bfa46f13bcfd7fd6d4e7" compoundref="cJSON_8h" startline="99">cJSON_IsReference</references>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8h_1aa2cb4765308e2bbdf01988b2acdf92d9" compoundref="cJSON_8h" startline="94">cJSON_String</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <references refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" compoundref="cJSON_8h" startline="115">cJSON::valuestring</references>
        <referencedby refid="misc__tests_8c_1af0b06ef3eb2d4a70d1ae8f0e15319250" compoundref="misc__tests_8c" startline="504" endline="512">cjson_create_string_reference_should_create_a_string_reference</referencedby>
        <referencedby refid="misc__tests_8c_1a06e02ea5758a010882e0e97d94438c18" compoundref="misc__tests_8c" startline="618" endline="651">cjson_set_valuestring_to_object_should_not_leak_memory</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a3c3b40420dd74cc7fbbc355628239aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateObjectReference</definition>
        <argsstring>(const cJSON *child)</argsstring>
        <name>cJSON_CreateObjectReference</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="211" column="10" bodyfile="cJSON.c" bodystart="2475" bodyend="2484" declfile="cJSON.h" declline="211" declcolumn="10"/>
        <references refid="cJSON_8c_1a48223c36735c39cfc4711b0659f966c8" compoundref="cJSON_8c" startline="1998" endline="2001">cast_away_const</references>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8h_1ad3d18116aae3bfa46f13bcfd7fd6d4e7" compoundref="cJSON_8h" startline="99">cJSON_IsReference</references>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8h_1a22c6e13481c090629afbd77b7cebd24c" compoundref="cJSON_8h" startline="96">cJSON_Object</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="misc__tests_8c_1a0ae3705414c90d50e3c2a19ea636f144" compoundref="misc__tests_8c" startline="514" endline="530">cjson_create_object_reference_should_create_an_object_reference</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a1f44bc9691c8766252b5bddaae04ffc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateArrayReference</definition>
        <argsstring>(const cJSON *child)</argsstring>
        <name>cJSON_CreateArrayReference</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="212" column="10" bodyfile="cJSON.c" bodystart="2486" bodyend="2494" declfile="cJSON.h" declline="212" declcolumn="10"/>
        <references refid="cJSON_8c_1a48223c36735c39cfc4711b0659f966c8" compoundref="cJSON_8c" startline="1998" endline="2001">cast_away_const</references>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8h_1a57cffa126740a8efcdcb7bcef80e8897" compoundref="cJSON_8h" startline="95">cJSON_Array</references>
        <references refid="cJSON_8h_1ad3d18116aae3bfa46f13bcfd7fd6d4e7" compoundref="cJSON_8h" startline="99">cJSON_IsReference</references>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <referencedby refid="misc__tests_8c_1aabf3532394819d472abff8f322670832" compoundref="misc__tests_8c" startline="532" endline="547">cjson_create_array_reference_should_create_an_array_reference</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a12576edcea9baca64be6fe7a6ae8d4fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateIntArray</definition>
        <argsstring>(const int *numbers, int count)</argsstring>
        <name>cJSON_CreateIntArray</name>
        <param>
          <type>const int *</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="216" column="10" bodyfile="cJSON.c" bodystart="2536" bodyend="2574" declfile="cJSON.h" declline="216" declcolumn="10"/>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8c_1a29e5808c66c1cf1f3edbf117babe07b3" compoundref="cJSON_8c" startline="2513" endline="2522">cJSON_CreateArray</references>
        <references refid="cJSON_8c_1a220d076d7d3a309049d6889be6d4904a" compoundref="cJSON_8c" startline="2420" endline="2444">cJSON_CreateNumber</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="unity__output__Spy_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" compoundref="unity__output__Spy_8c" startline="16">count</references>
        <references refid="structcJSON_1a488a393f610347821fce8e985e79fc2f" compoundref="cJSON_8h" startline="107">cJSON::prev</references>
        <references refid="cJSON_8c_1a5d61bcc0045ace88c2ae04f0928eeace" compoundref="cJSON_8c" startline="1924" endline="1928">suffix_object</references>
        <referencedby refid="cjson__add_8c_1a2345e8af2c128cd86a05fa37591e81ae" compoundref="cjson__add_8c" startline="120" endline="129">cjson_create_int_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
        <referencedby refid="old__utils__tests_8c_1a5eef89c8012b160e542da762a24a15a1" compoundref="old__utils__tests_8c" startline="88" endline="136">misc_tests</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a328fe12c04efcf2073b218bbf35ac6ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateFloatArray</definition>
        <argsstring>(const float *numbers, int count)</argsstring>
        <name>cJSON_CreateFloatArray</name>
        <param>
          <type>const float *</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="217" column="10" bodyfile="cJSON.c" bodystart="2576" bodyend="2614" declfile="cJSON.h" declline="217" declcolumn="10"/>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8c_1a29e5808c66c1cf1f3edbf117babe07b3" compoundref="cJSON_8c" startline="2513" endline="2522">cJSON_CreateArray</references>
        <references refid="cJSON_8c_1a220d076d7d3a309049d6889be6d4904a" compoundref="cJSON_8c" startline="2420" endline="2444">cJSON_CreateNumber</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="unity__output__Spy_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" compoundref="unity__output__Spy_8c" startline="16">count</references>
        <references refid="structcJSON_1a488a393f610347821fce8e985e79fc2f" compoundref="cJSON_8h" startline="107">cJSON::prev</references>
        <references refid="cJSON_8c_1a5d61bcc0045ace88c2ae04f0928eeace" compoundref="cJSON_8c" startline="1924" endline="1928">suffix_object</references>
        <referencedby refid="cjson__add_8c_1a959d654b8a9d7d7ca6d5af0355419ed0" compoundref="cjson__add_8c" startline="131" endline="140">cjson_create_float_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a04cb41ee475a68bd2ee63e92d8534049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateDoubleArray</definition>
        <argsstring>(const double *numbers, int count)</argsstring>
        <name>cJSON_CreateDoubleArray</name>
        <param>
          <type>const double *</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="218" column="10" bodyfile="cJSON.c" bodystart="2616" bodyend="2654" declfile="cJSON.h" declline="218" declcolumn="10"/>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8c_1a29e5808c66c1cf1f3edbf117babe07b3" compoundref="cJSON_8c" startline="2513" endline="2522">cJSON_CreateArray</references>
        <references refid="cJSON_8c_1a220d076d7d3a309049d6889be6d4904a" compoundref="cJSON_8c" startline="2420" endline="2444">cJSON_CreateNumber</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="unity__output__Spy_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" compoundref="unity__output__Spy_8c" startline="16">count</references>
        <references refid="structcJSON_1a488a393f610347821fce8e985e79fc2f" compoundref="cJSON_8h" startline="107">cJSON::prev</references>
        <references refid="cJSON_8c_1a5d61bcc0045ace88c2ae04f0928eeace" compoundref="cJSON_8c" startline="1924" endline="1928">suffix_object</references>
        <referencedby refid="cjson__add_8c_1a6a356f38f42a1e49ba155273a48e9160" compoundref="cjson__add_8c" startline="142" endline="151">cjson_create_double_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a1419ae039480a44d0bf2fcfe30d75cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_CreateStringArray</definition>
        <argsstring>(const char *const *strings, int count)</argsstring>
        <name>cJSON_CreateStringArray</name>
        <param>
          <type>const char *const *</type>
          <declname>strings</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="219" column="10" bodyfile="cJSON.c" bodystart="2656" bodyend="2694" declfile="cJSON.h" declline="219" declcolumn="10"/>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8c_1a29e5808c66c1cf1f3edbf117babe07b3" compoundref="cJSON_8c" startline="2513" endline="2522">cJSON_CreateArray</references>
        <references refid="cJSON_8c_1a5987bbc1c94d9f602d719a4015ff0e6c" compoundref="cJSON_8c" startline="2446" endline="2461">cJSON_CreateString</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="unity__output__Spy_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" compoundref="unity__output__Spy_8c" startline="16">count</references>
        <references refid="structcJSON_1a488a393f610347821fce8e985e79fc2f" compoundref="cJSON_8h" startline="107">cJSON::prev</references>
        <references refid="cJSON_8c_1a5d61bcc0045ace88c2ae04f0928eeace" compoundref="cJSON_8c" startline="1924" endline="1928">suffix_object</references>
        <referencedby refid="cjson__add_8c_1a5fccd141f29329062e01226286a9d4ee" compoundref="cjson__add_8c" startline="153" endline="162">cjson_create_string_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1afdbbb05c681bab6cf6bd7fc856ed0f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_AddItemToArray</definition>
        <argsstring>(cJSON *array, cJSON *item)</argsstring>
        <name>cJSON_AddItemToArray</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="222" column="14" bodyfile="cJSON.c" bodystart="1986" bodyend="1989" declfile="cJSON.h" declline="222" declcolumn="14"/>
        <references refid="cJSON_8c_1a816d10c908af6be844a1f8277363e2f1" compoundref="cJSON_8c" startline="1952" endline="1983">add_item_to_array</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <referencedby refid="cJSON__Utils_8c_1ae7f4ca7c392e544cb2fb6ff04af7a7ab" compoundref="cJSON__Utils_8c" startline="807" endline="1036">apply_patch</referencedby>
        <referencedby refid="misc__tests_8c_1a9a9771de88a32752b40c60449e746f9d" compoundref="misc__tests_8c" startline="549" endline="563">cjson_add_item_to_object_or_array_should_not_add_itself</referencedby>
        <referencedby refid="misc__tests_8c_1aabf3532394819d472abff8f322670832" compoundref="misc__tests_8c" startline="532" endline="547">cjson_create_array_reference_should_create_an_array_reference</referencedby>
        <referencedby refid="misc__tests_8c_1a658c34a7906299a70100225956260653" compoundref="misc__tests_8c" startline="584" endline="616">cjson_delete_item_from_array_should_not_broken_list_structure</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1ac96bb79bdea45dc66f6d11a70f8f4e15" compoundref="misc__tests_8c" startline="283" endline="328">cjson_replace_item_via_pointer_should_replace_items</referencedby>
        <referencedby refid="cJSON__Utils_8c_1af8cba403c61c1c77c2904176b90a1252" compoundref="cJSON__Utils_8c" startline="1096" endline="1134">compose_patch</referencedby>
        <referencedby refid="readme__examples_8c_1ab10b3b636031ab2ee2c74f1718760d03" compoundref="readme__examples_8c" startline="45" endline="115">create_monitor</referencedby>
        <referencedby refid="readme__examples_8c_1a3df44a6d83f425696bde276722b71b5f" compoundref="readme__examples_8c" startline="117" endline="166">create_monitor_with_helpers</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
        <referencedby refid="cJSON__Utils_8c_1aa6cc1d0d8a5424cc0d480fa655234ca1" compoundref="cJSON__Utils_8c" startline="693" endline="728">insert_item_in_array</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1abd37b2dd120f7852123dd51af5ff9d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_AddItemToObject</definition>
        <argsstring>(cJSON *object, const char *string, cJSON *item)</argsstring>
        <name>cJSON_AddItemToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="223" column="14" bodyfile="cJSON.c" bodystart="2044" bodyend="2047" declfile="cJSON.h" declline="223" declcolumn="14"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <referencedby refid="cJSON__Utils_8c_1ae7f4ca7c392e544cb2fb6ff04af7a7ab" compoundref="cJSON__Utils_8c" startline="807" endline="1036">apply_patch</referencedby>
        <referencedby refid="misc__tests_8c_1a9a9771de88a32752b40c60449e746f9d" compoundref="misc__tests_8c" startline="549" endline="563">cjson_add_item_to_object_or_array_should_not_add_itself</referencedby>
        <referencedby refid="misc__tests_8c_1afafcede9e71e151a8b580f7c479a4788" compoundref="misc__tests_8c" startline="565" endline="582">cjson_add_item_to_object_should_not_use_after_free_when_string_is_aliased</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1a2625be0fc51f0e946d292e1d37505ce4" compoundref="misc__tests_8c" startline="330" endline="350">cjson_replace_item_in_object_should_preserve_name</referencedby>
        <referencedby refid="misc__tests_8c_1a06e02ea5758a010882e0e97d94438c18" compoundref="misc__tests_8c" startline="618" endline="651">cjson_set_valuestring_to_object_should_not_leak_memory</referencedby>
        <referencedby refid="cJSON__Utils_8c_1af8cba403c61c1c77c2904176b90a1252" compoundref="cJSON__Utils_8c" startline="1096" endline="1134">compose_patch</referencedby>
        <referencedby refid="readme__examples_8c_1ab10b3b636031ab2ee2c74f1718760d03" compoundref="readme__examples_8c" startline="45" endline="115">create_monitor</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
        <referencedby refid="cJSON__Utils_8c_1aadd3bcea1f78c5f4cd4e0b794b62806f" compoundref="cJSON__Utils_8c" startline="1390" endline="1470">generate_merge_patch</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a0a9688491653ffc21762a397ee028693" compoundref="cJSON__Utils_8c" startline="1321" endline="1378">merge_patch</referencedby>
        <referencedby refid="old__utils__tests_8c_1a5eef89c8012b160e542da762a24a15a1" compoundref="old__utils__tests_8c" startline="88" endline="136">misc_tests</referencedby>
        <referencedby refid="old__utils__tests_8c_1ac65d33ddd0ff0a5284ecbbd589bcb6ce" compoundref="old__utils__tests_8c" startline="138" endline="166">sort_tests</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a1a8343a44a67e9e12dcdd4ab5ec0eeab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_AddItemToObjectCS</definition>
        <argsstring>(cJSON *object, const char *string, cJSON *item)</argsstring>
        <name>cJSON_AddItemToObjectCS</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="227" column="14" bodyfile="cJSON.c" bodystart="2050" bodyend="2053" declfile="cJSON.h" declline="227" declcolumn="14"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <referencedby refid="misc__tests_8c_1a0ae3705414c90d50e3c2a19ea636f144" compoundref="misc__tests_8c" startline="514" endline="530">cjson_create_object_reference_should_create_an_object_reference</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1af6760a489221979675cf09a929ab8371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_AddItemReferenceToArray</definition>
        <argsstring>(cJSON *array, cJSON *item)</argsstring>
        <name>cJSON_AddItemReferenceToArray</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="229" column="14" bodyfile="cJSON.c" bodystart="2055" bodyend="2063" declfile="cJSON.h" declline="229" declcolumn="14"/>
        <references refid="cJSON_8c_1a816d10c908af6be844a1f8277363e2f1" compoundref="cJSON_8c" startline="1952" endline="1983">add_item_to_array</references>
        <references refid="cJSON_8c_1ac06bbc307a6f39fe58aafbcb82fbf4b3" compoundref="cJSON_8c" startline="1931" endline="1950">create_reference</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1ac58d6e55575270866aa3f6b385711635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_AddItemReferenceToObject</definition>
        <argsstring>(cJSON *object, const char *string, cJSON *item)</argsstring>
        <name>cJSON_AddItemReferenceToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="230" column="14" bodyfile="cJSON.c" bodystart="2065" bodyend="2073" declfile="cJSON.h" declline="230" declcolumn="14"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1ac06bbc307a6f39fe58aafbcb82fbf4b3" compoundref="cJSON_8c" startline="1931" endline="1950">create_reference</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1ae9c7ddde95571ef5027da5007281a4b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_DetachItemViaPointer</definition>
        <argsstring>(cJSON *parent, cJSON *const item)</argsstring>
        <name>cJSON_DetachItemViaPointer</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="233" column="10" bodyfile="cJSON.c" bodystart="2183" bodyend="2217" declfile="cJSON.h" declline="233" declcolumn="10"/>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ade862b880379b5e2a591f7326401fa8d" compoundref="cJSON_8h" startline="106">cJSON::next</references>
        <references refid="structcJSON_1a488a393f610347821fce8e985e79fc2f" compoundref="cJSON_8h" startline="107">cJSON::prev</references>
        <referencedby refid="misc__tests_8c_1afdb14ab4e6cc2f99f9928c8d6f08c794" compoundref="misc__tests_8c" startline="243" endline="281">cjson_detach_item_via_pointer_should_detach_items</referencedby>
        <referencedby refid="cJSON_8c_1a68b9e0b2d984f1d873fb571425a98b9b" compoundref="cJSON_8c" startline="2219" endline="2227">cJSON_DetachItemFromArray</referencedby>
        <referencedby refid="cJSON_8c_1a7010822d267256f274e0adf22be2b202" compoundref="cJSON_8c" startline="2234" endline="2239">cJSON_DetachItemFromObject</referencedby>
        <referencedby refid="cJSON_8c_1a75ab57d1dfc9dca274bf713fca641ba1" compoundref="cJSON_8c" startline="2241" endline="2246">cJSON_DetachItemFromObjectCaseSensitive</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a68b9e0b2d984f1d873fb571425a98b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_DetachItemFromArray</definition>
        <argsstring>(cJSON *array, int which)</argsstring>
        <name>cJSON_DetachItemFromArray</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="234" column="10" bodyfile="cJSON.c" bodystart="2219" bodyend="2227" declfile="cJSON.h" declline="234" declcolumn="10"/>
        <references refid="cJSON_8c_1ae9c7ddde95571ef5027da5007281a4b4" compoundref="cJSON_8c" startline="2183" endline="2217">cJSON_DetachItemViaPointer</references>
        <references refid="cJSON_8c_1a82f460889bcb63ee840fc821feef5aa5" compoundref="cJSON_8c" startline="1847" endline="1864">get_array_item</references>
        <referencedby refid="cJSON_8c_1a2b08ee3d172cb94e9abea1e4031a366f" compoundref="cJSON_8c" startline="2229" endline="2232">cJSON_DeleteItemFromArray</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a2b08ee3d172cb94e9abea1e4031a366f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cJSON_DeleteItemFromArray</definition>
        <argsstring>(cJSON *array, int which)</argsstring>
        <name>cJSON_DeleteItemFromArray</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="235" column="8" bodyfile="cJSON.c" bodystart="2229" bodyend="2232" declfile="cJSON.h" declline="235" declcolumn="8"/>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a68b9e0b2d984f1d873fb571425a98b9b" compoundref="cJSON_8c" startline="2219" endline="2227">cJSON_DetachItemFromArray</references>
        <referencedby refid="misc__tests_8c_1a658c34a7906299a70100225956260653" compoundref="misc__tests_8c" startline="584" endline="616">cjson_delete_item_from_array_should_not_broken_list_structure</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a7010822d267256f274e0adf22be2b202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_DetachItemFromObject</definition>
        <argsstring>(cJSON *object, const char *string)</argsstring>
        <name>cJSON_DetachItemFromObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="236" column="10" bodyfile="cJSON.c" bodystart="2234" bodyend="2239" declfile="cJSON.h" declline="236" declcolumn="10"/>
        <references refid="cJSON_8c_1ae9c7ddde95571ef5027da5007281a4b4" compoundref="cJSON_8c" startline="2183" endline="2217">cJSON_DetachItemViaPointer</references>
        <references refid="cJSON_8c_1af2319add4b386eb74159ab4d8ed0695d" compoundref="cJSON_8c" startline="1908" endline="1911">cJSON_GetObjectItem</references>
        <referencedby refid="cJSON_8c_1a148a56617a2a97921d9b9dfbe5dc85bf" compoundref="cJSON_8c" startline="2248" endline="2251">cJSON_DeleteItemFromObject</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a53302772bf80ab32f501e603ffe9ac98" compoundref="cJSON__Utils_8c" startline="430" endline="481">detach_path</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a0a9688491653ffc21762a397ee028693" compoundref="cJSON__Utils_8c" startline="1321" endline="1378">merge_patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a75ab57d1dfc9dca274bf713fca641ba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_DetachItemFromObjectCaseSensitive</definition>
        <argsstring>(cJSON *object, const char *string)</argsstring>
        <name>cJSON_DetachItemFromObjectCaseSensitive</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="237" column="10" bodyfile="cJSON.c" bodystart="2241" bodyend="2246" declfile="cJSON.h" declline="237" declcolumn="10"/>
        <references refid="cJSON_8c_1ae9c7ddde95571ef5027da5007281a4b4" compoundref="cJSON_8c" startline="2183" endline="2217">cJSON_DetachItemViaPointer</references>
        <references refid="cJSON_8c_1a8be913fd1cb9ccf9672afcc3cdac35d5" compoundref="cJSON_8c" startline="1913" endline="1916">cJSON_GetObjectItemCaseSensitive</references>
        <referencedby refid="cJSON_8c_1a65893174ab9ffa37a7896e9aa7461975" compoundref="cJSON_8c" startline="2253" endline="2256">cJSON_DeleteItemFromObjectCaseSensitive</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a0a9688491653ffc21762a397ee028693" compoundref="cJSON__Utils_8c" startline="1321" endline="1378">merge_patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a148a56617a2a97921d9b9dfbe5dc85bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cJSON_DeleteItemFromObject</definition>
        <argsstring>(cJSON *object, const char *string)</argsstring>
        <name>cJSON_DeleteItemFromObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="238" column="8" bodyfile="cJSON.c" bodystart="2248" bodyend="2251" declfile="cJSON.h" declline="238" declcolumn="8"/>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a7010822d267256f274e0adf22be2b202" compoundref="cJSON_8c" startline="2234" endline="2239">cJSON_DetachItemFromObject</references>
        <referencedby refid="cJSON__Utils_8c_1ae7f4ca7c392e544cb2fb6ff04af7a7ab" compoundref="cJSON__Utils_8c" startline="807" endline="1036">apply_patch</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a0a9688491653ffc21762a397ee028693" compoundref="cJSON__Utils_8c" startline="1321" endline="1378">merge_patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a65893174ab9ffa37a7896e9aa7461975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cJSON_DeleteItemFromObjectCaseSensitive</definition>
        <argsstring>(cJSON *object, const char *string)</argsstring>
        <name>cJSON_DeleteItemFromObjectCaseSensitive</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="239" column="8" bodyfile="cJSON.c" bodystart="2253" bodyend="2256" declfile="cJSON.h" declline="239" declcolumn="8"/>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a75ab57d1dfc9dca274bf713fca641ba1" compoundref="cJSON_8c" startline="2241" endline="2246">cJSON_DetachItemFromObjectCaseSensitive</references>
        <referencedby refid="cJSON__Utils_8c_1ae7f4ca7c392e544cb2fb6ff04af7a7ab" compoundref="cJSON__Utils_8c" startline="807" endline="1036">apply_patch</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a0a9688491653ffc21762a397ee028693" compoundref="cJSON__Utils_8c" startline="1321" endline="1378">merge_patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a252642dc04a9af897c35286536fec267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_InsertItemInArray</definition>
        <argsstring>(cJSON *array, int which, cJSON *newitem)</argsstring>
        <name>cJSON_InsertItemInArray</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>newitem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="242" column="14" bodyfile="cJSON.c" bodystart="2259" bodyend="2286" declfile="cJSON.h" declline="242" declcolumn="14"/>
        <references refid="cJSON_8c_1a816d10c908af6be844a1f8277363e2f1" compoundref="cJSON_8c" startline="1952" endline="1983">add_item_to_array</references>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8c_1a82f460889bcb63ee840fc821feef5aa5" compoundref="cJSON_8c" startline="1847" endline="1864">get_array_item</references>
        <references refid="structcJSON_1ade862b880379b5e2a591f7326401fa8d" compoundref="cJSON_8h" startline="106">cJSON::next</references>
        <references refid="structcJSON_1a488a393f610347821fce8e985e79fc2f" compoundref="cJSON_8h" startline="107">cJSON::prev</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a47bb96e61883eafa3f5d359ce5dd6509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_ReplaceItemViaPointer</definition>
        <argsstring>(cJSON *const parent, cJSON *const item, cJSON *replacement)</argsstring>
        <name>cJSON_ReplaceItemViaPointer</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="243" column="14" bodyfile="cJSON.c" bodystart="2288" bodyend="2335" declfile="cJSON.h" declline="243" declcolumn="14"/>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ade862b880379b5e2a591f7326401fa8d" compoundref="cJSON_8h" startline="106">cJSON::next</references>
        <references refid="structcJSON_1a488a393f610347821fce8e985e79fc2f" compoundref="cJSON_8h" startline="107">cJSON::prev</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1ac96bb79bdea45dc66f6d11a70f8f4e15" compoundref="misc__tests_8c" startline="283" endline="328">cjson_replace_item_via_pointer_should_replace_items</referencedby>
        <referencedby refid="cJSON_8c_1a97ea105bc1bc92e7d784dcd7c9520789" compoundref="cJSON_8c" startline="2337" endline="2345">cJSON_ReplaceItemInArray</referencedby>
        <referencedby refid="cJSON_8c_1afdae75197cf2c440ef858a2e93b104f2" compoundref="cJSON_8c" startline="2347" endline="2363">replace_item_in_object</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a97ea105bc1bc92e7d784dcd7c9520789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_ReplaceItemInArray</definition>
        <argsstring>(cJSON *array, int which, cJSON *newitem)</argsstring>
        <name>cJSON_ReplaceItemInArray</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>newitem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="244" column="14" bodyfile="cJSON.c" bodystart="2337" bodyend="2345" declfile="cJSON.h" declline="244" declcolumn="14"/>
        <references refid="cJSON_8c_1a47bb96e61883eafa3f5d359ce5dd6509" compoundref="cJSON_8c" startline="2288" endline="2335">cJSON_ReplaceItemViaPointer</references>
        <references refid="cJSON_8c_1a82f460889bcb63ee840fc821feef5aa5" compoundref="cJSON_8c" startline="1847" endline="1864">get_array_item</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a42e5821d0570bf3ea5a047b19ba84cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_ReplaceItemInObject</definition>
        <argsstring>(cJSON *object, const char *string, cJSON *newitem)</argsstring>
        <name>cJSON_ReplaceItemInObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>newitem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="245" column="14" bodyfile="cJSON.c" bodystart="2365" bodyend="2368" declfile="cJSON.h" declline="245" declcolumn="14"/>
        <references refid="cJSON_8c_1afdae75197cf2c440ef858a2e93b104f2" compoundref="cJSON_8c" startline="2347" endline="2363">replace_item_in_object</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1a2625be0fc51f0e946d292e1d37505ce4" compoundref="misc__tests_8c" startline="330" endline="350">cjson_replace_item_in_object_should_preserve_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1abfa308bbc85fc1658ffc14cb3281c2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_ReplaceItemInObjectCaseSensitive</definition>
        <argsstring>(cJSON *object, const char *string, cJSON *newitem)</argsstring>
        <name>cJSON_ReplaceItemInObjectCaseSensitive</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>newitem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="246" column="14" bodyfile="cJSON.c" bodystart="2370" bodyend="2373" declfile="cJSON.h" declline="246" declcolumn="14"/>
        <references refid="cJSON_8c_1afdae75197cf2c440ef858a2e93b104f2" compoundref="cJSON_8c" startline="2347" endline="2363">replace_item_in_object</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a010fe0dd2606bdfafc7eb0123b20222e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_Duplicate</definition>
        <argsstring>(const cJSON *item, cJSON_bool recurse)</argsstring>
        <name>cJSON_Duplicate</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
          <declname>recurse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="249" column="10" bodyfile="cJSON.c" bodystart="2697" bodyend="2778" declfile="cJSON.h" declline="249" declcolumn="10"/>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a010fe0dd2606bdfafc7eb0123b20222e" compoundref="cJSON_8c" startline="2697" endline="2778">cJSON_Duplicate</references>
        <references refid="cJSON_8h_1ad3d18116aae3bfa46f13bcfd7fd6d4e7" compoundref="cJSON_8h" startline="99">cJSON_IsReference</references>
        <references refid="cJSON_8c_1a8f447c625af025c35d0ec59032ad6473" compoundref="cJSON_8c" startline="241" endline="250">cJSON_New_Item</references>
        <references refid="cJSON_8c_1a5da7bd9b4622e97e7e19c36017410252" compoundref="cJSON_8c" startline="188" endline="207">cJSON_strdup</references>
        <references refid="cJSON_8h_1a491c3484a36f3915cc4710088f55971f" compoundref="cJSON_8h" startline="100">cJSON_StringIsConst</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__array_8c" startline="31">item</references>
        <references refid="structcJSON_1ade862b880379b5e2a591f7326401fa8d" compoundref="cJSON_8h" startline="106">cJSON::next</references>
        <references refid="structcJSON_1a488a393f610347821fce8e985e79fc2f" compoundref="cJSON_8h" startline="107">cJSON::prev</references>
        <references refid="structcJSON_1aa6b47e9a4b0e0a26f519b1a2b6739983" compoundref="cJSON_8h" startline="122">cJSON::string</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <references refid="structcJSON_1a4b21817d0fd2919901abadac73214e7f" compoundref="cJSON_8h" startline="119">cJSON::valuedouble</references>
        <references refid="structcJSON_1a369cea49494eb5d4409d532a731a0fbf" compoundref="cJSON_8h" startline="117">cJSON::valueint</references>
        <references refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" compoundref="cJSON_8h" startline="115">cJSON::valuestring</references>
        <referencedby refid="cJSON__Utils_8c_1ae7f4ca7c392e544cb2fb6ff04af7a7ab" compoundref="cJSON__Utils_8c" startline="807" endline="1036">apply_patch</referencedby>
        <referencedby refid="cJSON_8c_1a010fe0dd2606bdfafc7eb0123b20222e" compoundref="cJSON_8c" startline="2697" endline="2778">cJSON_Duplicate</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="cJSON__Utils_8c_1af8cba403c61c1c77c2904176b90a1252" compoundref="cJSON__Utils_8c" startline="1096" endline="1134">compose_patch</referencedby>
        <referencedby refid="cJSON__Utils_8c_1aadd3bcea1f78c5f4cd4e0b794b62806f" compoundref="cJSON__Utils_8c" startline="1390" endline="1470">generate_merge_patch</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a0a9688491653ffc21762a397ee028693" compoundref="cJSON__Utils_8c" startline="1321" endline="1378">merge_patch</referencedby>
        <referencedby refid="json__patch__tests_8c_1a3ae4cfc74fe6a5fac249299f229e8ab7" compoundref="json__patch__tests_8c" startline="49" endline="120">test_apply_patch</referencedby>
        <referencedby refid="json__patch__tests_8c_1aa59e85969b210bbc43f2105bb522c73a" compoundref="json__patch__tests_8c" startline="122" endline="181">test_generate_test</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a42801ee95f281ee07fe132dee8abce6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
        <definition>cJSON_bool cJSON_Compare</definition>
        <argsstring>(const cJSON *const a, const cJSON *const b, const cJSON_bool case_sensitive)</argsstring>
        <name>cJSON_Compare</name>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
          <declname>case_sensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="255" column="14" bodyfile="cJSON.c" bodystart="2977" bodyend="3100" declfile="cJSON.h" declline="255" declcolumn="14"/>
        <references refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" compoundref="cJSON_8h" startline="109">cJSON::child</references>
        <references refid="cJSON_8h_1a57cffa126740a8efcdcb7bcef80e8897" compoundref="cJSON_8h" startline="95">cJSON_Array</references>
        <references refid="cJSON_8h_1ac3d6e5782fb4bb3c7a25c7c5b1868f06" compoundref="cJSON_8h" startline="283">cJSON_ArrayForEach</references>
        <references refid="cJSON_8c_1a42801ee95f281ee07fe132dee8abce6b" compoundref="cJSON_8c" startline="2977" endline="3100">cJSON_Compare</references>
        <references refid="cJSON_8h_1a2d240682316354b5748f909ad220184b" compoundref="cJSON_8h" startline="90">cJSON_False</references>
        <references refid="cJSON_8c_1a49373f6a455b8b99443b9c170b787e86" compoundref="cJSON_8c" startline="2877" endline="2885">cJSON_IsInvalid</references>
        <references refid="cJSON_8h_1aeadaba63ddb68aaa518528595d503dcd" compoundref="cJSON_8h" startline="92">cJSON_NULL</references>
        <references refid="cJSON_8h_1a15e77e2f6457dc9b19c10ddb032af971" compoundref="cJSON_8h" startline="93">cJSON_Number</references>
        <references refid="cJSON_8h_1a22c6e13481c090629afbd77b7cebd24c" compoundref="cJSON_8h" startline="96">cJSON_Object</references>
        <references refid="cJSON_8h_1ae9ddc931ea84908d12f48c5b7f8731a1" compoundref="cJSON_8h" startline="97">cJSON_Raw</references>
        <references refid="cJSON_8h_1aa2cb4765308e2bbdf01988b2acdf92d9" compoundref="cJSON_8h" startline="94">cJSON_String</references>
        <references refid="cJSON_8h_1aad4e442b8095939decddfb67d87d9324" compoundref="cJSON_8h" startline="91">cJSON_True</references>
        <references refid="cJSON_8c_1aa7a85b63f1830e7e666e1f56872d5d3e" compoundref="cJSON_8c" startline="538" endline="542">compare_double</references>
        <references refid="cJSON_8c_1a768303890e9be802d51b0e0a110302f4" compoundref="cJSON_8c" startline="1876" endline="1906">get_object_item</references>
        <references refid="structcJSON_1ade862b880379b5e2a591f7326401fa8d" compoundref="cJSON_8h" startline="106">cJSON::next</references>
        <references refid="structcJSON_1aa6b47e9a4b0e0a26f519b1a2b6739983" compoundref="cJSON_8h" startline="122">cJSON::string</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <references refid="structcJSON_1a4b21817d0fd2919901abadac73214e7f" compoundref="cJSON_8h" startline="119">cJSON::valuedouble</references>
        <references refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" compoundref="cJSON_8h" startline="115">cJSON::valuestring</references>
        <referencedby refid="cJSON_8c_1a42801ee95f281ee07fe132dee8abce6b" compoundref="cJSON_8c" startline="2977" endline="3100">cJSON_Compare</referencedby>
        <referencedby refid="compare__tests_8c_1a22b5e7a5c745ccb80860f0091a667ede" compoundref="compare__tests_8c" startline="52" endline="59">cjson_compare_should_compare_invalid_as_not_equal</referencedby>
        <referencedby refid="compare__tests_8c_1a37b5f6cb55887592a5cbd56a4a424bbe" compoundref="compare__tests_8c" startline="46" endline="50">cjson_compare_should_compare_null_pointer_as_not_equal</referencedby>
        <referencedby refid="compare__tests_8c_1a85a35043b591b7cc9aa0ce025f7b6850" compoundref="compare__tests_8c" startline="121" endline="139">cjson_compare_should_compare_raw</referencedby>
        <referencedby refid="compare__tests_8c_1a411b5730db2eba3bf7a095d87c2d637d" compoundref="compare__tests_8c" startline="101" endline="110">cjson_compare_should_not_accept_invalid_types</referencedby>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="compare__tests_8c_1a3e7af6bf4c2d42bcd521dd3783e75998" compoundref="compare__tests_8c" startline="27" endline="44">compare_from_string</referencedby>
        <referencedby refid="parse__with__opts_8c_1a71a233b608f7216650144d100ef405e9" compoundref="parse__with__opts_8c" startline="84" endline="98">parse_with_opts_should_parse_utf8_bom</referencedby>
        <referencedby refid="json__patch__tests_8c_1a3ae4cfc74fe6a5fac249299f229e8ab7" compoundref="json__patch__tests_8c" startline="49" endline="120">test_apply_patch</referencedby>
        <referencedby refid="json__patch__tests_8c_1aa59e85969b210bbc43f2105bb522c73a" compoundref="json__patch__tests_8c" startline="122" endline="181">test_generate_test</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1afd416be779f90b6369a189437d3bcc05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cJSON_Minify</definition>
        <argsstring>(char *json)</argsstring>
        <name>cJSON_Minify</name>
        <param>
          <type>char *</type>
          <declname>json</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="260" column="8" bodyfile="cJSON.c" bodystart="2829" bodyend="2875" declfile="cJSON.h" declline="260" declcolumn="8"/>
        <references refid="readme__examples_8c_1a4dd85a1ffd4add568eb3b646e857eadc" compoundref="readme__examples_8c" startline="31">json</references>
        <references refid="cJSON_8c_1a569f331078de59d01dee9351fa106e3b" compoundref="cJSON_8c" startline="2807" endline="2827">minify_string</references>
        <references refid="cJSON_8c_1a4b9e22afcb0d33932c691b5af9f2560a" compoundref="cJSON_8c" startline="2793" endline="2805">skip_multiline_comment</references>
        <references refid="cJSON_8c_1a98eaeafefb811c738494a26265309a07" compoundref="cJSON_8c" startline="2780" endline="2791">skip_oneline_comment</references>
        <referencedby refid="misc__tests_8c_1a8db8916ca66092c6f9924456953fbf8f" compoundref="misc__tests_8c" startline="352" endline="436">cjson_functions_should_not_crash_with_null_pointers</referencedby>
        <referencedby refid="minify__tests_8c_1a10f3d30e494600e717641b12b6effe6d" compoundref="minify__tests_8c" startline="100" endline="153">cjson_minify_should_minify_json</referencedby>
        <referencedby refid="minify__tests_8c_1ab089bf82c3a3ed5cbc26e0ae7ed658b9" compoundref="minify__tests_8c" startline="155" endline="159">cjson_minify_should_not_loop_infinitely</referencedby>
        <referencedby refid="minify__tests_8c_1aaa97a1eb49a4a4b815159138a30302d9" compoundref="minify__tests_8c" startline="86" endline="98">cjson_minify_should_not_modify_strings</referencedby>
        <referencedby refid="minify__tests_8c_1aaa2c07732bce3b97ad7a32f06e866f57" compoundref="minify__tests_8c" startline="32" endline="42">cjson_minify_should_not_overflow_buffer</referencedby>
        <referencedby refid="minify__tests_8c_1a62f2306efbf2bfb87c8437526d702d36" compoundref="minify__tests_8c" startline="72" endline="84">cjson_minify_should_remove_multiline_comments</referencedby>
        <referencedby refid="minify__tests_8c_1a44da525c415c98813e000777359fc91f" compoundref="minify__tests_8c" startline="44" endline="56">cjson_minify_should_remove_single_line_comments</referencedby>
        <referencedby refid="minify__tests_8c_1a418dd84eef18277ec6cdd9e36e895475" compoundref="minify__tests_8c" startline="58" endline="70">cjson_minify_should_remove_spaces</referencedby>
        <referencedby refid="cjson__read__fuzzer_8c_1a91ce7c16e9840492202299da2b451e60" compoundref="cjson__read__fuzzer_8c" startline="13" endline="72">LLVMFuzzerTestOneInput</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a6e425c8aa8e9577cb4511a6be0959d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_AddNullToObject</definition>
        <argsstring>(cJSON *const object, const char *const name)</argsstring>
        <name>cJSON_AddNullToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="264" column="9" bodyfile="cJSON.c" bodystart="2075" bodyend="2085" declfile="cJSON.h" declline="264" declcolumn="9"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a83ea2a0b33071a1120b9052170a2bc13" compoundref="cJSON_8c" startline="2376" endline="2385">cJSON_CreateNull</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" compoundref="unity__fixture__Test_8c" startline="216">name</references>
        <referencedby refid="cjson__add_8c_1a31a2dc3dfe049283ebaea153555f443f" compoundref="cjson__add_8c" startline="48" endline="59">cjson_add_null_should_add_null</referencedby>
        <referencedby refid="cjson__add_8c_1aebf28b3f89ed1b346bd8aab639c6372c" compoundref="cjson__add_8c" startline="71" endline="82">cjson_add_null_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a52b973a8a39fce650a2dd3fb80ee5bab" compoundref="cjson__add_8c" startline="61" endline="69">cjson_add_null_should_fail_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a08bd4e0d459e39b20ad737acdb110adc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_AddTrueToObject</definition>
        <argsstring>(cJSON *const object, const char *const name)</argsstring>
        <name>cJSON_AddTrueToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="265" column="9" bodyfile="cJSON.c" bodystart="2087" bodyend="2097" declfile="cJSON.h" declline="265" declcolumn="9"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a07b3d4616c5a682aa558180713ce858a" compoundref="cJSON_8c" startline="2387" endline="2396">cJSON_CreateTrue</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" compoundref="unity__fixture__Test_8c" startline="216">name</references>
        <referencedby refid="cjson__add_8c_1a2f02038182067b35da56b958618caa6f" compoundref="cjson__add_8c" startline="84" endline="95">cjson_add_true_should_add_true</referencedby>
        <referencedby refid="cjson__add_8c_1ae9470b7ad04d9da4f6ab52d2ed0222fa" compoundref="cjson__add_8c" startline="107" endline="118">cjson_add_true_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a617f9dc0ec20654d1a6be0650907f3ae" compoundref="cjson__add_8c" startline="97" endline="105">cjson_add_true_should_fail_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1ad162d48e83915525082bcbeed6262d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_AddFalseToObject</definition>
        <argsstring>(cJSON *const object, const char *const name)</argsstring>
        <name>cJSON_AddFalseToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="266" column="9" bodyfile="cJSON.c" bodystart="2099" bodyend="2109" declfile="cJSON.h" declline="266" declcolumn="9"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a33dcdd4d4f5da12bc91372376908c42b" compoundref="cJSON_8c" startline="2398" endline="2407">cJSON_CreateFalse</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" compoundref="unity__fixture__Test_8c" startline="216">name</references>
        <referencedby refid="cjson__add_8c_1ae7ee5f05d3311d2480865aaa71c128f0" compoundref="cjson__add_8c" startline="164" endline="175">cjson_add_false_should_add_false</referencedby>
        <referencedby refid="cjson__add_8c_1aa6f2cab70fbe47fe7006420d79fa76a6" compoundref="cjson__add_8c" startline="187" endline="198">cjson_add_false_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a84a509f291b16c31518e35506cdafe99" compoundref="cjson__add_8c" startline="177" endline="185">cjson_add_false_should_fail_with_null_pointers</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a421ba4c0e845aff2e4c8efcbd70d75d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_AddBoolToObject</definition>
        <argsstring>(cJSON *const object, const char *const name, const cJSON_bool boolean)</argsstring>
        <name>cJSON_AddBoolToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref></type>
          <declname>boolean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="267" column="9" bodyfile="cJSON.c" bodystart="2111" bodyend="2121" declfile="cJSON.h" declline="267" declcolumn="9"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a859fe1cf8203f2d0131d388f7b1178f1" compoundref="cJSON_8c" startline="2409" endline="2418">cJSON_CreateBool</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" compoundref="unity__fixture__Test_8c" startline="216">name</references>
        <referencedby refid="cjson__add_8c_1a906dee347b143ba380bd5c35dd2b5c11" compoundref="cjson__add_8c" startline="200" endline="217">cjson_add_bool_should_add_bool</referencedby>
        <referencedby refid="cjson__add_8c_1ad60f93569585858a582867bac944cc29" compoundref="cjson__add_8c" startline="229" endline="240">cjson_add_bool_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a216505e918c4eefab3ce964655506947" compoundref="cjson__add_8c" startline="219" endline="227">cjson_add_bool_should_fail_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a27a7a4fb786cb7fa289dbf83889f3c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_AddNumberToObject</definition>
        <argsstring>(cJSON *const object, const char *const name, const double number)</argsstring>
        <name>cJSON_AddNumberToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="268" column="9" bodyfile="cJSON.c" bodystart="2123" bodyend="2133" declfile="cJSON.h" declline="268" declcolumn="9"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a220d076d7d3a309049d6889be6d4904a" compoundref="cJSON_8c" startline="2420" endline="2444">cJSON_CreateNumber</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" compoundref="unity__fixture__Test_8c" startline="216">name</references>
        <referencedby refid="cjson__add_8c_1a90630b9261ccf9f102de52bb85d1dda3" compoundref="cjson__add_8c" startline="242" endline="256">cjson_add_number_should_add_number</referencedby>
        <referencedby refid="cjson__add_8c_1acf27b6aa94c2c8d2b29152bcafd0fb89" compoundref="cjson__add_8c" startline="268" endline="279">cjson_add_number_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a83921007d8ad36822427034ca1d6aa11" compoundref="cjson__add_8c" startline="258" endline="266">cjson_add_number_should_fail_with_null_pointers</referencedby>
        <referencedby refid="readme__examples_8c_1a3df44a6d83f425696bde276722b71b5f" compoundref="readme__examples_8c" startline="117" endline="166">create_monitor_with_helpers</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1aec47eaefc2d022a9d53d172899e27a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_AddStringToObject</definition>
        <argsstring>(cJSON *const object, const char *const name, const char *const string)</argsstring>
        <name>cJSON_AddStringToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="269" column="9" bodyfile="cJSON.c" bodystart="2135" bodyend="2145" declfile="cJSON.h" declline="269" declcolumn="9"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a5987bbc1c94d9f602d719a4015ff0e6c" compoundref="cJSON_8c" startline="2446" endline="2461">cJSON_CreateString</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" compoundref="unity__fixture__Test_8c" startline="216">name</references>
        <referencedby refid="cjson__add_8c_1a79abc4fe5667eded0df91b5320edbf85" compoundref="cjson__add_8c" startline="281" endline="293">cjson_add_string_should_add_string</referencedby>
        <referencedby refid="cjson__add_8c_1a9332b1a2d2ad53a70d56eb65e5f50c8e" compoundref="cjson__add_8c" startline="305" endline="316">cjson_add_string_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a33ebaa2876583bc1ccb1641addc9c20f" compoundref="cjson__add_8c" startline="295" endline="303">cjson_add_string_should_fail_with_null_pointers</referencedby>
        <referencedby refid="readme__examples_8c_1a3df44a6d83f425696bde276722b71b5f" compoundref="readme__examples_8c" startline="117" endline="166">create_monitor_with_helpers</referencedby>
        <referencedby refid="test_8c_1af04b0068a43be07ead5dcfb1f3f01aed" compoundref="test_8c" startline="109" endline="257">create_objects</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a20d19c3672d259d001dbc352b02539e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_AddRawToObject</definition>
        <argsstring>(cJSON *const object, const char *const name, const char *const raw)</argsstring>
        <name>cJSON_AddRawToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="270" column="9" bodyfile="cJSON.c" bodystart="2147" bodyend="2157" declfile="cJSON.h" declline="270" declcolumn="9"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a57b09346ba8bf22a1ef6198258f12e20" compoundref="cJSON_8c" startline="2496" endline="2511">cJSON_CreateRaw</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" compoundref="unity__fixture__Test_8c" startline="216">name</references>
        <referencedby refid="cjson__add_8c_1aad320d705b69a79d3797b02db41b8335" compoundref="cjson__add_8c" startline="318" endline="330">cjson_add_raw_should_add_raw</referencedby>
        <referencedby refid="cjson__add_8c_1af6881b7e57f75a6ff44ec50b2939d2da" compoundref="cjson__add_8c" startline="342" endline="353">cjson_add_raw_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a47ed6a71469c72ca1b91613b7a0babd9" compoundref="cjson__add_8c" startline="332" endline="340">cjson_add_raw_should_fail_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a7fedf1f410515d88917f6086048d3064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_AddObjectToObject</definition>
        <argsstring>(cJSON *const object, const char *const name)</argsstring>
        <name>cJSON_AddObjectToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="271" column="9" bodyfile="cJSON.c" bodystart="2159" bodyend="2169" declfile="cJSON.h" declline="271" declcolumn="9"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a9c5f44afdd781b16dead90042fe74085" compoundref="cJSON_8c" startline="2524" endline="2533">cJSON_CreateObject</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" compoundref="unity__fixture__Test_8c" startline="216">name</references>
        <referencedby refid="cjson__add_8c_1a9098c85ee9dd963cfc682ab328932707" compoundref="cjson__add_8c" startline="355" endline="365">cJSON_add_object_should_add_object</referencedby>
        <referencedby refid="cjson__add_8c_1a185a89f8e24cac97d1cb2e4a1a8278db" compoundref="cjson__add_8c" startline="377" endline="388">cjson_add_object_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1a8022426b2f978e4a9191fc8d817c2040" compoundref="cjson__add_8c" startline="367" endline="375">cjson_add_object_should_fail_with_null_pointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a9aee370d9aa8997e5a39f76a643792ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
        <definition>cJSON* cJSON_AddArrayToObject</definition>
        <argsstring>(cJSON *const object, const char *const name)</argsstring>
        <name>cJSON_AddArrayToObject</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *const</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="272" column="9" bodyfile="cJSON.c" bodystart="2171" bodyend="2181" declfile="cJSON.h" declline="272" declcolumn="9"/>
        <references refid="cJSON_8c_1acc48bef0e1b495898d9489e577b91d5c" compoundref="cJSON_8c" startline="2007" endline="2042">add_item_to_object</references>
        <references refid="cJSON_8c_1a29e5808c66c1cf1f3edbf117babe07b3" compoundref="cJSON_8c" startline="2513" endline="2522">cJSON_CreateArray</references>
        <references refid="cJSON_8c_1a927f7b148cc30fc17210a4511f724cb0" compoundref="cJSON_8c" startline="253" endline="274">cJSON_Delete</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" compoundref="unity__fixture__Test_8c" startline="216">name</references>
        <referencedby refid="cjson__add_8c_1a68aad8702c7daab6b0aced5ed76a15bf" compoundref="cjson__add_8c" startline="390" endline="400">cJSON_add_array_should_add_array</referencedby>
        <referencedby refid="cjson__add_8c_1a008722fbefd317869e031ebbabf574df" compoundref="cjson__add_8c" startline="412" endline="423">cjson_add_array_should_fail_on_allocation_failure</referencedby>
        <referencedby refid="cjson__add_8c_1ad268e05d4df8d72c3c2a96d528b403b1" compoundref="cjson__add_8c" startline="402" endline="410">cjson_add_array_should_fail_with_null_pointers</referencedby>
        <referencedby refid="misc__tests_8c_1a658c34a7906299a70100225956260653" compoundref="misc__tests_8c" startline="584" endline="616">cjson_delete_item_from_array_should_not_broken_list_structure</referencedby>
        <referencedby refid="readme__examples_8c_1a3df44a6d83f425696bde276722b71b5f" compoundref="readme__examples_8c" startline="117" endline="166">create_monitor_with_helpers</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a95d6295c4fcb12785bc5bc900b4c7828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double cJSON_SetNumberHelper</definition>
        <argsstring>(cJSON *object, double number)</argsstring>
        <name>cJSON_SetNumberHelper</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="277" column="10" bodyfile="cJSON.c" bodystart="382" bodyend="398" declfile="cJSON.h" declline="277" declcolumn="10"/>
        <references refid="structcJSON_1a4b21817d0fd2919901abadac73214e7f" compoundref="cJSON_8h" startline="119">cJSON::valuedouble</references>
        <references refid="structcJSON_1a369cea49494eb5d4409d532a731a0fbf" compoundref="cJSON_8h" startline="117">cJSON::valueint</references>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1a82bbed62a1098d8dcd2c3e472ee6b83e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* cJSON_SetValuestring</definition>
        <argsstring>(cJSON *object, const char *valuestring)</argsstring>
        <name>cJSON_SetValuestring</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>valuestring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="280" column="8" bodyfile="cJSON.c" bodystart="400" bodyend="425" declfile="cJSON.h" declline="280" declcolumn="8"/>
        <references refid="cJSON_8c_1aed268df09d4cf0d685d0c035a7453fd5" compoundref="cJSON_8c" startline="3107" endline="3110">cJSON_free</references>
        <references refid="cJSON_8h_1ad3d18116aae3bfa46f13bcfd7fd6d4e7" compoundref="cJSON_8h" startline="99">cJSON_IsReference</references>
        <references refid="cJSON_8c_1a5da7bd9b4622e97e7e19c36017410252" compoundref="cJSON_8c" startline="188" endline="207">cJSON_strdup</references>
        <references refid="cJSON_8h_1aa2cb4765308e2bbdf01988b2acdf92d9" compoundref="cJSON_8h" startline="94">cJSON_String</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" compoundref="cJSON_8h" startline="112">cJSON::type</references>
        <references refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" compoundref="cJSON_8h" startline="115">cJSON::valuestring</references>
        <referencedby refid="misc__tests_8c_1a06e02ea5758a010882e0e97d94438c18" compoundref="misc__tests_8c" startline="618" endline="651">cjson_set_valuestring_to_object_should_not_leak_memory</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1aeb5d79aa96b3440181bfe67323239770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* cJSON_malloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>cJSON_malloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="286" column="9" bodyfile="cJSON.c" bodystart="3102" bodyend="3105" declfile="cJSON.h" declline="286" declcolumn="9"/>
        <references refid="structinternal__hooks_1ad1a502782955f6cceb0b75fb16cb6f92" compoundref="cJSON_8c" startline="158">internal_hooks::allocate</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="unity__output__Spy_8c_1a439227feff9d7f55384e8780cfc2eb82" compoundref="unity__output__Spy_8c" startline="15">size</references>
        <referencedby refid="cJSON__Utils_8c_1a77e7485a5ded70768f9deb7ccde950bd" compoundref="cJSON__Utils_8c" startline="198" endline="259">cJSONUtils_FindPointerFromObjectTo</referencedby>
        <referencedby refid="cJSON__Utils_8c_1ae9902c3fd7daebe10107208317f4175a" compoundref="cJSON__Utils_8c" startline="66" endline="80">cJSONUtils_strdup</referencedby>
        <referencedby refid="cJSON__Utils_8c_1af8cba403c61c1c77c2904176b90a1252" compoundref="cJSON__Utils_8c" startline="1096" endline="1134">compose_patch</referencedby>
        <referencedby refid="cJSON__Utils_8c_1ac9c69681d59c2d18501cbf05dc93b52a" compoundref="cJSON__Utils_8c" startline="1141" endline="1279">create_patches</referencedby>
      </memberdef>
      <memberdef kind="function" id="cJSON_8h_1aed268df09d4cf0d685d0c035a7453fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cJSON_free</definition>
        <argsstring>(void *object)</argsstring>
        <name>cJSON_free</name>
        <param>
          <type>void *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cJSON.h" line="287" column="8" bodyfile="cJSON.c" bodystart="3107" bodyend="3110" declfile="cJSON.h" declline="287" declcolumn="8"/>
        <references refid="structinternal__hooks_1a183ba09ef4a15f75fec90d3a14ff587e" compoundref="cJSON_8c" startline="159">internal_hooks::deallocate</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <referencedby refid="cJSON__Utils_8c_1ae7f4ca7c392e544cb2fb6ff04af7a7ab" compoundref="cJSON__Utils_8c" startline="807" endline="1036">apply_patch</referencedby>
        <referencedby refid="misc__tests_8c_1ac96bb79bdea45dc66f6d11a70f8f4e15" compoundref="misc__tests_8c" startline="283" endline="328">cjson_replace_item_via_pointer_should_replace_items</referencedby>
        <referencedby refid="cJSON_8c_1a82bbed62a1098d8dcd2c3e472ee6b83e" compoundref="cJSON_8c" startline="400" endline="425">cJSON_SetValuestring</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a77e7485a5ded70768f9deb7ccde950bd" compoundref="cJSON__Utils_8c" startline="198" endline="259">cJSONUtils_FindPointerFromObjectTo</referencedby>
        <referencedby refid="cJSON__Utils_8c_1af8cba403c61c1c77c2904176b90a1252" compoundref="cJSON__Utils_8c" startline="1096" endline="1134">compose_patch</referencedby>
        <referencedby refid="cJSON__Utils_8c_1ac9c69681d59c2d18501cbf05dc93b52a" compoundref="cJSON__Utils_8c" startline="1141" endline="1279">create_patches</referencedby>
        <referencedby refid="cJSON__Utils_8c_1a53302772bf80ab32f501e603ffe9ac98" compoundref="cJSON__Utils_8c" startline="430" endline="481">detach_path</referencedby>
        <referencedby refid="cJSON__Utils_8c_1acf685df049535cc95f2e66759cfe057e" compoundref="cJSON__Utils_8c" startline="784" endline="805">overwrite_item</referencedby>
        <referencedby refid="cJSON_8c_1afdae75197cf2c440ef858a2e93b104f2" compoundref="cJSON_8c" startline="2347" endline="2363">replace_item_in_object</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>(c)<sp/>2009-2017<sp/>Dave<sp/>Gamble<sp/>and<sp/>cJSON<sp/>contributors</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>cJSON__h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON__h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__WINDOWS__)<sp/>&amp;&amp;<sp/>(defined(WIN32)<sp/>||<sp/>defined(WIN64)<sp/>||<sp/>defined(_MSC_VER)<sp/>||<sp/>defined(_WIN32))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__WINDOWS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__WINDOWS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>When<sp/>compiling<sp/>for<sp/>windows,<sp/>we<sp/>specify<sp/>a<sp/>specific<sp/>calling<sp/>convention<sp/>to<sp/>avoid<sp/>issues<sp/>where<sp/>we<sp/>are<sp/>being<sp/>called<sp/>from<sp/>a<sp/>project<sp/>with<sp/>a<sp/>different<sp/>default<sp/>calling<sp/>convention.<sp/><sp/>For<sp/>windows<sp/>you<sp/>have<sp/>3<sp/>define<sp/>options:</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment">CJSON_HIDE_SYMBOLS<sp/>-<sp/>Define<sp/>this<sp/>in<sp/>the<sp/>case<sp/>where<sp/>you<sp/>don&apos;t<sp/>want<sp/>to<sp/>ever<sp/>dllexport<sp/>symbols</highlight></codeline>
<codeline lineno="40"><highlight class="comment">CJSON_EXPORT_SYMBOLS<sp/>-<sp/>Define<sp/>this<sp/>on<sp/>library<sp/>build<sp/>when<sp/>you<sp/>want<sp/>to<sp/>dllexport<sp/>symbols<sp/>(default)</highlight></codeline>
<codeline lineno="41"><highlight class="comment">CJSON_IMPORT_SYMBOLS<sp/>-<sp/>Define<sp/>this<sp/>if<sp/>you<sp/>want<sp/>to<sp/>dllimport<sp/>symbol</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">For<sp/>*nix<sp/>builds<sp/>that<sp/>support<sp/>visibility<sp/>attribute,<sp/>you<sp/>can<sp/>define<sp/>similar<sp/>behavior<sp/>by</highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment">setting<sp/>default<sp/>visibility<sp/>to<sp/>hidden<sp/>by<sp/>adding</highlight></codeline>
<codeline lineno="46"><highlight class="comment">-fvisibility=hidden<sp/>(for<sp/>gcc)</highlight></codeline>
<codeline lineno="47"><highlight class="comment">or</highlight></codeline>
<codeline lineno="48"><highlight class="comment">-xldscope=hidden<sp/>(for<sp/>sun<sp/>cc)</highlight></codeline>
<codeline lineno="49"><highlight class="comment">to<sp/>CFLAGS</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">then<sp/>using<sp/>the<sp/>CJSON_API_VISIBILITY<sp/>flag<sp/>to<sp/>&quot;export&quot;<sp/>the<sp/>same<sp/>symbols<sp/>the<sp/>way<sp/>CJSON_EXPORT_SYMBOLS<sp/>does</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_CDECL<sp/>__cdecl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_STDCALL<sp/>__stdcall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>export<sp/>symbols<sp/>by<sp/>default,<sp/>this<sp/>is<sp/>necessary<sp/>for<sp/>copy<sp/>pasting<sp/>the<sp/>C<sp/>and<sp/>header<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CJSON_HIDE_SYMBOLS)<sp/>&amp;&amp;<sp/>!defined(CJSON_IMPORT_SYMBOLS)<sp/>&amp;&amp;<sp/>!defined(CJSON_EXPORT_SYMBOLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_EXPORT_SYMBOLS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CJSON_HIDE_SYMBOLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_PUBLIC(type)<sp/><sp/><sp/>type<sp/>CJSON_STDCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CJSON_EXPORT_SYMBOLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_PUBLIC(type)<sp/><sp/><sp/>__declspec(dllexport)<sp/>type<sp/>CJSON_STDCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CJSON_IMPORT_SYMBOLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_PUBLIC(type)<sp/><sp/><sp/>__declspec(dllimport)<sp/>type<sp/>CJSON_STDCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!__WINDOWS__<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="cJSON_8h_1a79203c3ba406ffd5736627cc1e082e38" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_CDECL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="cJSON_8h_1aee2cdf14a236df79175ef257a5a94964" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_STDCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(__GNUC__)<sp/>||<sp/>defined(__SUNPRO_CC)<sp/>||<sp/>defined<sp/>(__SUNPRO_C))<sp/>&amp;&amp;<sp/>defined(CJSON_API_VISIBILITY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_PUBLIC(type)<sp/><sp/><sp/>__attribute__((visibility(&quot;default&quot;</highlight><highlight class="normal">)))<sp/>type</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_PUBLIC(type)<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>project<sp/>version<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="cJSON_8h_1a78f100ac5089a51941e2ca573ad8e380" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_VERSION_MAJOR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="cJSON_8h_1a55a808fe6b77cef1e4c2cf02a4316301" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_VERSION_MINOR<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="cJSON_8h_1a6ad7073103d4b9aaf2153add95561c47" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_VERSION_PATCH<sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>cJSON<sp/>Types:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="cJSON_8h_1a80c36e86d8d65b697bc623fe28027668" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_Invalid<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="cJSON_8h_1a2d240682316354b5748f909ad220184b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_False<sp/><sp/>(1<sp/>&lt;&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="cJSON_8h_1aad4e442b8095939decddfb67d87d9324" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_True<sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="cJSON_8h_1aeadaba63ddb68aaa518528595d503dcd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_NULL<sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="cJSON_8h_1a15e77e2f6457dc9b19c10ddb032af971" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_Number<sp/>(1<sp/>&lt;&lt;<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="cJSON_8h_1aa2cb4765308e2bbdf01988b2acdf92d9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_String<sp/>(1<sp/>&lt;&lt;<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="cJSON_8h_1a57cffa126740a8efcdcb7bcef80e8897" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_Array<sp/><sp/>(1<sp/>&lt;&lt;<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="cJSON_8h_1a22c6e13481c090629afbd77b7cebd24c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_Object<sp/>(1<sp/>&lt;&lt;<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="cJSON_8h_1ae9ddc931ea84908d12f48c5b7f8731a1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_Raw<sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>7)<sp/></highlight><highlight class="comment">/*<sp/>raw<sp/>json<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="cJSON_8h_1ad3d18116aae3bfa46f13bcfd7fd6d4e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_IsReference<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="cJSON_8h_1a491c3484a36f3915cc4710088f55971f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_StringIsConst<sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>cJSON<sp/>structure:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structcJSON" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcJSON" kindref="compound">cJSON</ref></highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next/prev<sp/>allow<sp/>you<sp/>to<sp/>walk<sp/>array/object<sp/>chains.<sp/>Alternatively,<sp/>use<sp/>GetArraySize/GetArrayItem/GetObjectItem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structcJSON_1ade862b880379b5e2a591f7326401fa8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="structcJSON_1ade862b880379b5e2a591f7326401fa8d" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="107" refid="structcJSON_1a488a393f610347821fce8e985e79fc2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="structcJSON_1a488a393f610347821fce8e985e79fc2f" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>An<sp/>array<sp/>or<sp/>object<sp/>item<sp/>will<sp/>have<sp/>a<sp/>child<sp/>pointer<sp/>pointing<sp/>to<sp/>a<sp/>chain<sp/>of<sp/>the<sp/>items<sp/>in<sp/>the<sp/>array/object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="structcJSON_1a401b274c2da358dac5c23ab8b2c71f85" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>type<sp/>of<sp/>the<sp/>item,<sp/>as<sp/>above.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structcJSON_1ab13084c574681593b12f6e0a3db0dcfc" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>item&apos;s<sp/>string,<sp/>if<sp/>type==cJSON_String<sp/><sp/>and<sp/>type<sp/>==<sp/>cJSON_Raw<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" kindref="member">valuestring</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>writing<sp/>to<sp/>valueint<sp/>is<sp/>DEPRECATED,<sp/>use<sp/>cJSON_SetNumberValue<sp/>instead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="structcJSON_1a369cea49494eb5d4409d532a731a0fbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structcJSON_1a369cea49494eb5d4409d532a731a0fbf" kindref="member">valueint</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>item&apos;s<sp/>number,<sp/>if<sp/>type==cJSON_Number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="structcJSON_1a4b21817d0fd2919901abadac73214e7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structcJSON_1a4b21817d0fd2919901abadac73214e7f" kindref="member">valuedouble</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>item&apos;s<sp/>name<sp/>string,<sp/>if<sp/>this<sp/>item<sp/>is<sp/>the<sp/>child<sp/>of,<sp/>or<sp/>is<sp/>in<sp/>the<sp/>list<sp/>of<sp/>subitems<sp/>of<sp/>an<sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="structcJSON_1aa6b47e9a4b0e0a26f519b1a2b6739983" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structcJSON_1aa6b47e9a4b0e0a26f519b1a2b6739983" kindref="member">string</ref>;</highlight></codeline>
<codeline lineno="123" refid="cJSON_8h_1a4c146234dfd7b6adbf13b49505e995bc" refkind="member"><highlight class="normal">}<sp/><ref refid="cJSON_8h_1a4c146234dfd7b6adbf13b49505e995bc" kindref="member">cJSON</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="structcJSON__Hooks" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcJSON__Hooks" kindref="compound">cJSON_Hooks</ref></highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>malloc/free<sp/>are<sp/>CDECL<sp/>on<sp/>Windows<sp/>regardless<sp/>of<sp/>the<sp/>default<sp/>calling<sp/>convention<sp/>of<sp/>the<sp/>compiler,<sp/>so<sp/>ensure<sp/>the<sp/>hooks<sp/>allow<sp/>passing<sp/>those<sp/>functions<sp/>directly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="structcJSON__Hooks_1a96ddf6d694eaa3f83aa10ee57539a5d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(<ref refid="cJSON_8h_1a79203c3ba406ffd5736627cc1e082e38" kindref="member">CJSON_CDECL</ref><sp/>*<ref refid="structcJSON__Hooks_1a96ddf6d694eaa3f83aa10ee57539a5d8" kindref="member">malloc_fn</ref>)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz);</highlight></codeline>
<codeline lineno="129" refid="structcJSON__Hooks_1a1a06e9718a48402de0e2ae5cc5118cdb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(<ref refid="cJSON_8h_1a79203c3ba406ffd5736627cc1e082e38" kindref="member">CJSON_CDECL</ref><sp/>*<ref refid="structcJSON__Hooks_1a1a06e9718a48402de0e2ae5cc5118cdb" kindref="member">free_fn</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="130" refid="cJSON_8h_1ab67bc592e52110fee68ab8ab4140530d" refkind="member"><highlight class="normal">}<sp/><ref refid="cJSON_8h_1ab67bc592e52110fee68ab8ab4140530d" kindref="member">cJSON_Hooks</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Limits<sp/>how<sp/>deeply<sp/>nested<sp/>arrays/objects<sp/>can<sp/>be<sp/>before<sp/>cJSON<sp/>rejects<sp/>to<sp/>parse<sp/>them.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>to<sp/>prevent<sp/>stack<sp/>overflows.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CJSON_NESTING_LIMIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="cJSON_8h_1a9c7ac4e1b31070b787afb3a4b67727f4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CJSON_NESTING_LIMIT<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>returns<sp/>the<sp/>version<sp/>of<sp/>cJSON<sp/>as<sp/>a<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/><ref refid="cJSON_8h_1ade07c00ada9acf6ffc5d33907d36cb8e" kindref="member">cJSON_Version</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Supply<sp/>malloc,<sp/>realloc<sp/>and<sp/>free<sp/>functions<sp/>to<sp/>cJSON<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="cJSON_8h_1a20837ed285a3c2abf578330f2bd97ad4" kindref="member">cJSON_InitHooks</ref>(<ref refid="structcJSON__Hooks" kindref="compound">cJSON_Hooks</ref>*<sp/>hooks);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Memory<sp/>Management:<sp/>the<sp/>caller<sp/>is<sp/>always<sp/>responsible<sp/>to<sp/>free<sp/>the<sp/>results<sp/>from<sp/>all<sp/>variants<sp/>of<sp/>cJSON_Parse<sp/>(with<sp/>cJSON_Delete)<sp/>and<sp/>cJSON_Print<sp/>(with<sp/>stdlib<sp/>free,<sp/>cJSON_Hooks.free_fn,<sp/>or<sp/>cJSON_free<sp/>as<sp/>appropriate).<sp/>The<sp/>exception<sp/>is<sp/>cJSON_PrintPreallocated,<sp/>where<sp/>the<sp/>caller<sp/>has<sp/>full<sp/>responsibility<sp/>of<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Supply<sp/>a<sp/>block<sp/>of<sp/>JSON,<sp/>and<sp/>this<sp/>returns<sp/>a<sp/>cJSON<sp/>object<sp/>you<sp/>can<sp/>interrogate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1ad3df5f943457d4befebe4109d48e4a50" kindref="member">cJSON_Parse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1afa205505c530b53131ea983834e4d0d2" kindref="member">cJSON_ParseWithLength</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_length);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ParseWithOpts<sp/>allows<sp/>you<sp/>to<sp/>require<sp/>(and<sp/>check)<sp/>that<sp/>the<sp/>JSON<sp/>is<sp/>null<sp/>terminated,<sp/>and<sp/>to<sp/>retrieve<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>final<sp/>byte<sp/>parsed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>you<sp/>supply<sp/>a<sp/>ptr<sp/>in<sp/>return_parse_end<sp/>and<sp/>parsing<sp/>fails,<sp/>then<sp/>return_parse_end<sp/>will<sp/>contain<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>error<sp/>so<sp/>will<sp/>match<sp/>cJSON_GetErrorPtr().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a5aedf7671708bc3a77f3393f3ded6265" kindref="member">cJSON_ParseWithOpts</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**return_parse_end,<sp/><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref><sp/>require_null_terminated);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1af72a0b4e3c59e7053859c0c0fe4fcda3" kindref="member">cJSON_ParseWithLengthOpts</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**return_parse_end,<sp/><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref><sp/>require_null_terminated);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Render<sp/>a<sp/>cJSON<sp/>entity<sp/>to<sp/>text<sp/>for<sp/>transfer/storage.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="cJSON_8h_1ae2177acac9871b89531e722b49f14925" kindref="member">cJSON_Print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Render<sp/>a<sp/>cJSON<sp/>entity<sp/>to<sp/>text<sp/>for<sp/>transfer/storage<sp/>without<sp/>any<sp/>formatting.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="cJSON_8h_1a0fa352e498073ced1c7fb9b84b5f684c" kindref="member">cJSON_PrintUnformatted</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Render<sp/>a<sp/>cJSON<sp/>entity<sp/>to<sp/>text<sp/>using<sp/>a<sp/>buffered<sp/>strategy.<sp/>prebuffer<sp/>is<sp/>a<sp/>guess<sp/>at<sp/>the<sp/>final<sp/>size.<sp/>guessing<sp/>well<sp/>reduces<sp/>reallocation.<sp/>fmt=0<sp/>gives<sp/>unformatted,<sp/>=1<sp/>gives<sp/>formatted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="cJSON_8h_1a318ef2c8804675893ed66dd28149cb12" kindref="member">cJSON_PrintBuffered</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prebuffer,<sp/><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref><sp/>fmt);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Render<sp/>a<sp/>cJSON<sp/>entity<sp/>to<sp/>text<sp/>using<sp/>a<sp/>buffer<sp/>already<sp/>allocated<sp/>in<sp/>memory<sp/>with<sp/>given<sp/>length.<sp/>Returns<sp/>1<sp/>on<sp/>success<sp/>and<sp/>0<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>cJSON<sp/>is<sp/>not<sp/>always<sp/>100%<sp/>accurate<sp/>in<sp/>estimating<sp/>how<sp/>much<sp/>memory<sp/>it<sp/>will<sp/>use,<sp/>so<sp/>to<sp/>be<sp/>safe<sp/>allocate<sp/>5<sp/>bytes<sp/>more<sp/>than<sp/>you<sp/>actually<sp/>need<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1afc7c06663cbfb2acf82d6db5f1436fbd" kindref="member">cJSON_PrintPreallocated</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref><sp/>format);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Delete<sp/>a<sp/>cJSON<sp/>entity<sp/>and<sp/>all<sp/>subentities.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="cJSON_8h_1a927f7b148cc30fc17210a4511f724cb0" kindref="member">cJSON_Delete</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>items<sp/>in<sp/>an<sp/>array<sp/>(or<sp/>object).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="cJSON_8h_1a3ed7a207e8a936fd77f6a1c1d517f458" kindref="member">cJSON_GetArraySize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*array);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Retrieve<sp/>item<sp/>number<sp/>&quot;index&quot;<sp/>from<sp/>array<sp/>&quot;array&quot;.<sp/>Returns<sp/>NULL<sp/>if<sp/>unsuccessful.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1add24a177049a26b6933318a95177e114" kindref="member">cJSON_GetArrayItem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>item<sp/>&quot;string&quot;<sp/>from<sp/>object.<sp/>Case<sp/>insensitive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1af2319add4b386eb74159ab4d8ed0695d" kindref="member">cJSON_GetObjectItem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a8be913fd1cb9ccf9672afcc3cdac35d5" kindref="member">cJSON_GetObjectItemCaseSensitive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1af98a544a2cf11887b5d8677833271e2e" kindref="member">cJSON_HasObjectItem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>analysing<sp/>failed<sp/>parses.<sp/>This<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>parse<sp/>error.<sp/>You&apos;ll<sp/>probably<sp/>need<sp/>to<sp/>look<sp/>a<sp/>few<sp/>chars<sp/>back<sp/>to<sp/>make<sp/>sense<sp/>of<sp/>it.<sp/>Defined<sp/>when<sp/>cJSON_Parse()<sp/>returns<sp/>0.<sp/>0<sp/>when<sp/>cJSON_Parse()<sp/>succeeds.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="cJSON_8h_1a5e81ffc372644963c759103865b0cad1" kindref="member">cJSON_GetErrorPtr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Check<sp/>item<sp/>type<sp/>and<sp/>return<sp/>its<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="cJSON_8h_1a8f13476fa43d33e3e6439b564af5c5e0" kindref="member">cJSON_GetStringValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/><ref refid="cJSON_8h_1a894042068cc1b20996bc7800700a9df0" kindref="member">cJSON_GetNumberValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>functions<sp/>check<sp/>the<sp/>type<sp/>of<sp/>an<sp/>item<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a49373f6a455b8b99443b9c170b787e86" kindref="member">cJSON_IsInvalid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a160f9c97b2e63c46dcdc192e3de9274d" kindref="member">cJSON_IsFalse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a4ad6de706aeece32cdb6348ba3e390f7" kindref="member">cJSON_IsTrue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a16bbe75ed6f97d121c141e4fec38d497" kindref="member">cJSON_IsBool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a7e941f0d623c8476b6a10e9b05464f4f" kindref="member">cJSON_IsNull</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a04148f2da6d47885c7498cfbf521a74d" kindref="member">cJSON_IsNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a87b7cb8032c9a552995e006f65f49cb5" kindref="member">cJSON_IsString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a3e8d0723e3be479074c45008f5cd3497" kindref="member">cJSON_IsArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a23baebcbfa93b56edb9e6b6f303f521b" kindref="member">cJSON_IsObject</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a9fc519447ecd559e84bdd3b634162ba8" kindref="member">cJSON_IsRaw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>calls<sp/>create<sp/>a<sp/>cJSON<sp/>item<sp/>of<sp/>the<sp/>appropriate<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a83ea2a0b33071a1120b9052170a2bc13" kindref="member">cJSON_CreateNull</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a07b3d4616c5a682aa558180713ce858a" kindref="member">cJSON_CreateTrue</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a33dcdd4d4f5da12bc91372376908c42b" kindref="member">cJSON_CreateFalse</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a859fe1cf8203f2d0131d388f7b1178f1" kindref="member">cJSON_CreateBool</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a220d076d7d3a309049d6889be6d4904a" kindref="member">cJSON_CreateNumber</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a5987bbc1c94d9f602d719a4015ff0e6c" kindref="member">cJSON_CreateString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>raw<sp/>json<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a57b09346ba8bf22a1ef6198258f12e20" kindref="member">cJSON_CreateRaw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*raw);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a29e5808c66c1cf1f3edbf117babe07b3" kindref="member">cJSON_CreateArray</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a9c5f44afdd781b16dead90042fe74085" kindref="member">cJSON_CreateObject</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>string<sp/>where<sp/>valuestring<sp/>references<sp/>a<sp/>string<sp/>so</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>it<sp/>will<sp/>not<sp/>be<sp/>freed<sp/>by<sp/>cJSON_Delete<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a9cb226121d5eb9ba4aa84b1c19cbc25b" kindref="member">cJSON_CreateStringReference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>an<sp/>object/array<sp/>that<sp/>only<sp/>references<sp/>it&apos;s<sp/>elements<sp/>so</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>they<sp/>will<sp/>not<sp/>be<sp/>freed<sp/>by<sp/>cJSON_Delete<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a3c3b40420dd74cc7fbbc355628239aa1" kindref="member">cJSON_CreateObjectReference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*child);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a1f44bc9691c8766252b5bddaae04ffc2" kindref="member">cJSON_CreateArrayReference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*child);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>utilities<sp/>create<sp/>an<sp/>Array<sp/>of<sp/>count<sp/>items.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>The<sp/>parameter<sp/>count<sp/>cannot<sp/>be<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>number<sp/>array,<sp/>otherwise<sp/>array<sp/>access<sp/>will<sp/>be<sp/>out<sp/>of<sp/>bounds.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a12576edcea9baca64be6fe7a6ae8d4fa" kindref="member">cJSON_CreateIntArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*numbers,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="unity__output__Spy_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a328fe12c04efcf2073b218bbf35ac6ec" kindref="member">cJSON_CreateFloatArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*numbers,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="unity__output__Spy_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a04cb41ee475a68bd2ee63e92d8534049" kindref="member">cJSON_CreateDoubleArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*numbers,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="unity__output__Spy_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a1419ae039480a44d0bf2fcfe30d75cc6" kindref="member">cJSON_CreateStringArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*strings,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="unity__output__Spy_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Append<sp/>item<sp/>to<sp/>the<sp/>specified<sp/>array/object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1afdbbb05c681bab6cf6bd7fc856ed0f31" kindref="member">cJSON_AddItemToArray</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*array,<sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1abd37b2dd120f7852123dd51af5ff9d78" kindref="member">cJSON_AddItemToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Use<sp/>this<sp/>when<sp/>string<sp/>is<sp/>definitely<sp/>const<sp/>(i.e.<sp/>a<sp/>literal,<sp/>or<sp/>as<sp/>good<sp/>as),<sp/>and<sp/>will<sp/>definitely<sp/>survive<sp/>the<sp/>cJSON<sp/>object.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>WARNING:<sp/>When<sp/>this<sp/>function<sp/>was<sp/>used,<sp/>make<sp/>sure<sp/>to<sp/>always<sp/>check<sp/>that<sp/>(item-&gt;type<sp/>&amp;<sp/>cJSON_StringIsConst)<sp/>is<sp/>zero<sp/>before</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>writing<sp/>to<sp/>`item-&gt;string`<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a1a8343a44a67e9e12dcdd4ab5ec0eeab" kindref="member">cJSON_AddItemToObjectCS</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Append<sp/>reference<sp/>to<sp/>item<sp/>to<sp/>the<sp/>specified<sp/>array/object.<sp/>Use<sp/>this<sp/>when<sp/>you<sp/>want<sp/>to<sp/>add<sp/>an<sp/>existing<sp/>cJSON<sp/>to<sp/>a<sp/>new<sp/>cJSON,<sp/>but<sp/>don&apos;t<sp/>want<sp/>to<sp/>corrupt<sp/>your<sp/>existing<sp/>cJSON.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1af6760a489221979675cf09a929ab8371" kindref="member">cJSON_AddItemReferenceToArray</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*array,<sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1ac58d6e55575270866aa3f6b385711635" kindref="member">cJSON_AddItemReferenceToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Remove/Detach<sp/>items<sp/>from<sp/>Arrays/Objects.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1ae9c7ddde95571ef5027da5007281a4b4" kindref="member">cJSON_DetachItemViaPointer</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*parent,<sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a68b9e0b2d984f1d873fb571425a98b9b" kindref="member">cJSON_DetachItemFromArray</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="cJSON_8h_1a2b08ee3d172cb94e9abea1e4031a366f" kindref="member">cJSON_DeleteItemFromArray</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a7010822d267256f274e0adf22be2b202" kindref="member">cJSON_DetachItemFromObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a75ab57d1dfc9dca274bf713fca641ba1" kindref="member">cJSON_DetachItemFromObjectCaseSensitive</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="cJSON_8h_1a148a56617a2a97921d9b9dfbe5dc85bf" kindref="member">cJSON_DeleteItemFromObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="cJSON_8h_1a65893174ab9ffa37a7896e9aa7461975" kindref="member">cJSON_DeleteItemFromObjectCaseSensitive</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Update<sp/>array<sp/>items.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a252642dc04a9af897c35286536fec267" kindref="member">cJSON_InsertItemInArray</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*newitem);<sp/></highlight><highlight class="comment">/*<sp/>Shifts<sp/>pre-existing<sp/>items<sp/>to<sp/>the<sp/>right.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a47bb96e61883eafa3f5d359ce5dd6509" kindref="member">cJSON_ReplaceItemViaPointer</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent,<sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>,<sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/>replacement);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a97ea105bc1bc92e7d784dcd7c9520789" kindref="member">cJSON_ReplaceItemInArray</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*newitem);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a42e5821d0570bf3ea5a047b19ba84cdf" kindref="member">cJSON_ReplaceItemInObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*newitem);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1abfa308bbc85fc1658ffc14cb3281c2d4" kindref="member">cJSON_ReplaceItemInObjectCaseSensitive</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*newitem);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Duplicate<sp/>a<sp/>cJSON<sp/>item<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*)<sp/><ref refid="cJSON_8h_1a010fe0dd2606bdfafc7eb0123b20222e" kindref="member">cJSON_Duplicate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<ref refid="parse__array_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>,<sp/><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref><sp/>recurse);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Duplicate<sp/>will<sp/>create<sp/>a<sp/>new,<sp/>identical<sp/>cJSON<sp/>item<sp/>to<sp/>the<sp/>one<sp/>you<sp/>pass,<sp/>in<sp/>new<sp/>memory<sp/>that<sp/>will</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>need<sp/>to<sp/>be<sp/>released.<sp/>With<sp/>recurse!=0,<sp/>it<sp/>will<sp/>duplicate<sp/>any<sp/>children<sp/>connected<sp/>to<sp/>the<sp/>item.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>The<sp/>item-&gt;next<sp/>and<sp/>-&gt;prev<sp/>pointers<sp/>are<sp/>always<sp/>zero<sp/>on<sp/>return<sp/>from<sp/>Duplicate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Recursively<sp/>compare<sp/>two<sp/>cJSON<sp/>items<sp/>for<sp/>equality.<sp/>If<sp/>either<sp/>a<sp/>or<sp/>b<sp/>is<sp/>NULL<sp/>or<sp/>invalid,<sp/>they<sp/>will<sp/>be<sp/>considered<sp/>unequal.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>case_sensitive<sp/>determines<sp/>if<sp/>object<sp/>keys<sp/>are<sp/>treated<sp/>case<sp/>sensitive<sp/>(1)<sp/>or<sp/>case<sp/>insensitive<sp/>(0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref>)<sp/><ref refid="cJSON_8h_1a42801ee95f281ee07fe132dee8abce6b" kindref="member">cJSON_Compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref><sp/>case_sensitive);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Minify<sp/>a<sp/>strings,<sp/>remove<sp/>blank<sp/>characters(such<sp/>as<sp/>&apos;<sp/>&apos;,<sp/>&apos;\t&apos;,<sp/>&apos;\r&apos;,<sp/>&apos;\n&apos;)<sp/>from<sp/>strings.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>The<sp/>input<sp/>pointer<sp/>json<sp/>cannot<sp/>point<sp/>to<sp/>a<sp/>read-only<sp/>address<sp/>area,<sp/>such<sp/>as<sp/>a<sp/>string<sp/>constant,<sp/></highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>but<sp/>should<sp/>point<sp/>to<sp/>a<sp/>readable<sp/>and<sp/>writable<sp/>adress<sp/>area.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="cJSON_8h_1afd416be779f90b6369a189437d3bcc05" kindref="member">cJSON_Minify</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="readme__examples_8c_1a4dd85a1ffd4add568eb3b646e857eadc" kindref="member">json</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Helper<sp/>functions<sp/>for<sp/>creating<sp/>and<sp/>adding<sp/>items<sp/>to<sp/>an<sp/>object<sp/>at<sp/>the<sp/>same<sp/>time.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>They<sp/>return<sp/>the<sp/>added<sp/>item<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref>*)<sp/><ref refid="cJSON_8h_1a6e425c8aa8e9577cb4511a6be0959d9a" kindref="member">cJSON_AddNullToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref>*)<sp/><ref refid="cJSON_8h_1a08bd4e0d459e39b20ad737acdb110adc" kindref="member">cJSON_AddTrueToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref>*)<sp/><ref refid="cJSON_8h_1ad162d48e83915525082bcbeed6262d91" kindref="member">cJSON_AddFalseToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref>*)<sp/><ref refid="cJSON_8h_1a421ba4c0e845aff2e4c8efcbd70d75d4" kindref="member">cJSON_AddBoolToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cJSON_8h_1aea0a1491f73d98b7cc4b8b791c408a4a" kindref="member">cJSON_bool</ref><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref>*)<sp/><ref refid="cJSON_8h_1a27a7a4fb786cb7fa289dbf83889f3c99" kindref="member">cJSON_AddNumberToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>number);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref>*)<sp/><ref refid="cJSON_8h_1aec47eaefc2d022a9d53d172899e27a2e" kindref="member">cJSON_AddStringToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref>*)<sp/><ref refid="cJSON_8h_1a20d19c3672d259d001dbc352b02539e9" kindref="member">cJSON_AddRawToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>raw);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref>*)<sp/><ref refid="cJSON_8h_1a7fedf1f410515d88917f6086048d3064" kindref="member">cJSON_AddObjectToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref>*)<sp/><ref refid="cJSON_8h_1a9aee370d9aa8997e5a39f76a643792ed" kindref="member">cJSON_AddArrayToObject</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unity__fixture__Test_8c_1a8ad72759d07f18eaf8f6690e5dfb747c" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>When<sp/>assigning<sp/>an<sp/>integer<sp/>value,<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>propagated<sp/>to<sp/>valuedouble<sp/>too.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="cJSON_8h_1ae5b1335bfccc358f566bea6f7e4bfdc6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_SetIntValue(object,<sp/>number)<sp/>((object)<sp/>?<sp/>(object)-&gt;valueint<sp/>=<sp/>(object)-&gt;valuedouble<sp/>=<sp/>(number)<sp/>:<sp/>(number))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>helper<sp/>for<sp/>the<sp/>cJSON_SetNumberValue<sp/>macro<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/><ref refid="cJSON_8h_1a95d6295c4fcb12785bc5bc900b4c7828" kindref="member">cJSON_SetNumberHelper</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>number);</highlight></codeline>
<codeline lineno="278" refid="cJSON_8h_1adab3f1e3586395bdb2da5a40059cb24b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_SetNumberValue(object,<sp/>number)<sp/>((object<sp/>!=<sp/>NULL)<sp/>?<sp/>cJSON_SetNumberHelper(object,<sp/>(double)number)<sp/>:<sp/>(number))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Change<sp/>the<sp/>valuestring<sp/>of<sp/>a<sp/>cJSON_String<sp/>object,<sp/>only<sp/>takes<sp/>effect<sp/>when<sp/>type<sp/>of<sp/>object<sp/>is<sp/>cJSON_String<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/><ref refid="cJSON_8h_1a82bbed62a1098d8dcd2c3e472ee6b83e" kindref="member">cJSON_SetValuestring</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*valuestring);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>for<sp/>iterating<sp/>over<sp/>an<sp/>array<sp/>or<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="cJSON_8h_1ac3d6e5782fb4bb3c7a25c7c5b1868f06" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cJSON_ArrayForEach(element,<sp/>array)<sp/>for(element<sp/>=<sp/>(array<sp/>!=<sp/>NULL)<sp/>?<sp/>(array)-&gt;child<sp/>:<sp/>NULL;<sp/>element<sp/>!=<sp/>NULL;<sp/>element<sp/>=<sp/>element-&gt;next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>malloc/free<sp/>objects<sp/>using<sp/>the<sp/>malloc/free<sp/>functions<sp/>that<sp/>have<sp/>been<sp/>set<sp/>with<sp/>cJSON_InitHooks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="cJSON_8h_1aeb5d79aa96b3440181bfe67323239770" kindref="member">cJSON_malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="unity__output__Spy_8c_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><ref refid="cJSON_8h_1a70709a6f2a7e45debe4f5abe345fcb86" kindref="member">CJSON_PUBLIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="cJSON_8h_1aed268df09d4cf0d685d0c035a7453fd5" kindref="member">cJSON_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="cJSON.h"/>
  </compounddef>
</doxygen>

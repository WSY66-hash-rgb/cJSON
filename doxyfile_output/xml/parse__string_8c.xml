<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="parse__string_8c" kind="file" language="C++">
    <compoundname>parse_string.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="unity__config_8h" local="yes">unity/examples/unity_config.h</includes>
    <includes refid="unity_8h" local="yes">unity/src/unity.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <incdepgraph>
      <node id="15">
        <label>float.h</label>
      </node>
      <node id="13">
        <label>../cJSON.c</label>
        <link refid="cJSON_8c"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>cJSON.h</label>
        <link refid="cJSON_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>setjmp.h</label>
      </node>
      <node id="1">
        <label>tests/parse_string.c</label>
        <link refid="parse__string_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stddef.h</label>
      </node>
      <node id="11">
        <label>limits.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unity/examples/unity_config.h</label>
        <link refid="unity__config_8h"/>
      </node>
      <node id="9">
        <label>math.h</label>
      </node>
      <node id="7">
        <label>unity_internals.h</label>
        <link refid="unity__internals_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>unity/src/unity.h</label>
        <link refid="unity_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ctype.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" prot="public" static="yes" mutable="no">
        <type><ref refid="structcJSON" kindref="compound">cJSON</ref></type>
        <definition>cJSON item[1]</definition>
        <argsstring>[1]</argsstring>
        <name>item</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="31" column="14" bodyfile="tests/parse_string.c" bodystart="31" bodyend="-1"/>
        <referencedby refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" compoundref="parse__string_8c" startline="60" endline="69">assert_not_parse_string</referencedby>
        <referencedby refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" compoundref="parse__string_8c" startline="46" endline="58">assert_parse_string</referencedby>
        <referencedby refid="parse__string_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="parse__string_8c" startline="122" endline="135">main</referencedby>
        <referencedby refid="parse__string_8c_1ade6210a40c420c0a14eef99cd37c58c3" compoundref="parse__string_8c" startline="109" endline="113">parse_string_should_not_overflow_with_closing_backslash</referencedby>
        <referencedby refid="parse__string_8c_1a8cd0d6e26e1673dbf2bf81505e839bb7" compoundref="parse__string_8c" startline="101" endline="107">parse_string_should_not_parse_invalid_backslash</referencedby>
        <referencedby refid="parse__string_8c_1ad0938d843c87286d6a70fcb37cf7cb28" compoundref="parse__string_8c" startline="93" endline="99">parse_string_should_not_parse_non_strings</referencedby>
        <referencedby refid="parse__string_8c_1aac34fc0edeb39fa1859d91b2bf5abe31" compoundref="parse__string_8c" startline="115" endline="120">parse_string_should_parse_bug_94</referencedby>
        <referencedby refid="parse__string_8c_1a954afd5f12ab1e31e8c653e79d72551f" compoundref="parse__string_8c" startline="73" endline="85">parse_string_should_parse_strings</referencedby>
        <referencedby refid="parse__string_8c_1a5ec06a9079e5fa76a8c8982c5261a018" compoundref="parse__string_8c" startline="87" endline="91">parse_string_should_parse_utf16_surrogate_pairs</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="parse__string_8c_1ac2f14b089f2d862ee79cfd72fe7475fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void assert_is_string</definition>
        <argsstring>(cJSON *string_item)</argsstring>
        <name>assert_is_string</name>
        <param>
          <type><ref refid="structcJSON" kindref="compound">cJSON</ref> *</type>
          <declname>string_item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="33" column="13" bodyfile="tests/parse_string.c" bodystart="33" bodyend="44"/>
        <referencedby refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" compoundref="parse__string_8c" startline="46" endline="58">assert_parse_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void assert_parse_string</definition>
        <argsstring>(const char *string, const char *expected)</argsstring>
        <name>assert_parse_string</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="46" column="13" bodyfile="tests/parse_string.c" bodystart="46" bodyend="58"/>
        <references refid="parse__string_8c_1ac2f14b089f2d862ee79cfd72fe7475fa" compoundref="parse__string_8c" startline="33" endline="44">assert_is_string</references>
        <references refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" compoundref="cJSON_8c" startline="289">parse_buffer::content</references>
        <references refid="structinternal__hooks_1a183ba09ef4a15f75fec90d3a14ff587e" compoundref="cJSON_8c" startline="159">internal_hooks::deallocate</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="structparse__buffer_1a2c3e99b15da2935fc5d58124ffb4a894" compoundref="cJSON_8c" startline="293">parse_buffer::hooks</references>
        <references refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__string_8c" startline="31">item</references>
        <references refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" compoundref="cJSON_8c" startline="290">parse_buffer::length</references>
        <references refid="cJSON_8c_1adf47b520af96d1bbefa2390016fbdb51" compoundref="cJSON_8c" startline="769" endline="895">parse_string</references>
        <references refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" compoundref="cJSON_8h" startline="115">cJSON::valuestring</references>
        <referencedby refid="parse__string_8c_1aac34fc0edeb39fa1859d91b2bf5abe31" compoundref="parse__string_8c" startline="115" endline="120">parse_string_should_parse_bug_94</referencedby>
        <referencedby refid="parse__string_8c_1a954afd5f12ab1e31e8c653e79d72551f" compoundref="parse__string_8c" startline="73" endline="85">parse_string_should_parse_strings</referencedby>
        <referencedby refid="parse__string_8c_1a5ec06a9079e5fa76a8c8982c5261a018" compoundref="parse__string_8c" startline="87" endline="91">parse_string_should_parse_utf16_surrogate_pairs</referencedby>
      </memberdef>
      <memberdef kind="function" id="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void assert_not_parse_string</definition>
        <argsstring>(const char *const string)</argsstring>
        <name>assert_not_parse_string</name>
        <param>
          <type>const char *const</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="60" column="13" bodyfile="tests/parse_string.c" bodystart="60" bodyend="69"/>
        <references refid="structparse__buffer_1a52ee1184576baa3d5171059ab0e942de" compoundref="cJSON_8c" startline="289">parse_buffer::content</references>
        <references refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" compoundref="cJSON_8c" startline="186">global_hooks</references>
        <references refid="structparse__buffer_1a2c3e99b15da2935fc5d58124ffb4a894" compoundref="cJSON_8c" startline="293">parse_buffer::hooks</references>
        <references refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__string_8c" startline="31">item</references>
        <references refid="structparse__buffer_1a036970e9335896d3cee8459eda9e2eb9" compoundref="cJSON_8c" startline="290">parse_buffer::length</references>
        <references refid="cJSON_8c_1adf47b520af96d1bbefa2390016fbdb51" compoundref="cJSON_8c" startline="769" endline="895">parse_string</references>
        <referencedby refid="parse__string_8c_1ade6210a40c420c0a14eef99cd37c58c3" compoundref="parse__string_8c" startline="109" endline="113">parse_string_should_not_overflow_with_closing_backslash</referencedby>
        <referencedby refid="parse__string_8c_1a8cd0d6e26e1673dbf2bf81505e839bb7" compoundref="parse__string_8c" startline="101" endline="107">parse_string_should_not_parse_invalid_backslash</referencedby>
        <referencedby refid="parse__string_8c_1ad0938d843c87286d6a70fcb37cf7cb28" compoundref="parse__string_8c" startline="93" endline="99">parse_string_should_not_parse_non_strings</referencedby>
      </memberdef>
      <memberdef kind="function" id="parse__string_8c_1a954afd5f12ab1e31e8c653e79d72551f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parse_string_should_parse_strings</definition>
        <argsstring>(void)</argsstring>
        <name>parse_string_should_parse_strings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="73" column="13" bodyfile="tests/parse_string.c" bodystart="73" bodyend="85"/>
        <references refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" compoundref="parse__string_8c" startline="46" endline="58">assert_parse_string</references>
        <references refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__string_8c" startline="31">item</references>
        <references refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" compoundref="common_8h" startline="29" endline="44">reset</references>
        <referencedby refid="parse__string_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="parse__string_8c" startline="122" endline="135">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="parse__string_8c_1a5ec06a9079e5fa76a8c8982c5261a018" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parse_string_should_parse_utf16_surrogate_pairs</definition>
        <argsstring>(void)</argsstring>
        <name>parse_string_should_parse_utf16_surrogate_pairs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="87" column="13" bodyfile="tests/parse_string.c" bodystart="87" bodyend="91"/>
        <references refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" compoundref="parse__string_8c" startline="46" endline="58">assert_parse_string</references>
        <references refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__string_8c" startline="31">item</references>
        <references refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" compoundref="common_8h" startline="29" endline="44">reset</references>
        <referencedby refid="parse__string_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="parse__string_8c" startline="122" endline="135">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="parse__string_8c_1ad0938d843c87286d6a70fcb37cf7cb28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parse_string_should_not_parse_non_strings</definition>
        <argsstring>(void)</argsstring>
        <name>parse_string_should_not_parse_non_strings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="93" column="13" bodyfile="tests/parse_string.c" bodystart="93" bodyend="99"/>
        <references refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" compoundref="parse__string_8c" startline="60" endline="69">assert_not_parse_string</references>
        <references refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__string_8c" startline="31">item</references>
        <references refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" compoundref="common_8h" startline="29" endline="44">reset</references>
        <referencedby refid="parse__string_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="parse__string_8c" startline="122" endline="135">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="parse__string_8c_1a8cd0d6e26e1673dbf2bf81505e839bb7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parse_string_should_not_parse_invalid_backslash</definition>
        <argsstring>(void)</argsstring>
        <name>parse_string_should_not_parse_invalid_backslash</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="101" column="13" bodyfile="tests/parse_string.c" bodystart="101" bodyend="107"/>
        <references refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" compoundref="parse__string_8c" startline="60" endline="69">assert_not_parse_string</references>
        <references refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__string_8c" startline="31">item</references>
        <references refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" compoundref="common_8h" startline="29" endline="44">reset</references>
        <referencedby refid="parse__string_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="parse__string_8c" startline="122" endline="135">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="parse__string_8c_1ade6210a40c420c0a14eef99cd37c58c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parse_string_should_not_overflow_with_closing_backslash</definition>
        <argsstring>(void)</argsstring>
        <name>parse_string_should_not_overflow_with_closing_backslash</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="109" column="13" bodyfile="tests/parse_string.c" bodystart="109" bodyend="113"/>
        <references refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" compoundref="parse__string_8c" startline="60" endline="69">assert_not_parse_string</references>
        <references refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__string_8c" startline="31">item</references>
        <references refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" compoundref="common_8h" startline="29" endline="44">reset</references>
        <referencedby refid="parse__string_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="parse__string_8c" startline="122" endline="135">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="parse__string_8c_1aac34fc0edeb39fa1859d91b2bf5abe31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parse_string_should_parse_bug_94</definition>
        <argsstring>(void)</argsstring>
        <name>parse_string_should_parse_bug_94</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="115" column="13" bodyfile="tests/parse_string.c" bodystart="115" bodyend="120"/>
        <references refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" compoundref="parse__string_8c" startline="46" endline="58">assert_parse_string</references>
        <references refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__string_8c" startline="31">item</references>
        <references refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" compoundref="common_8h" startline="29" endline="44">reset</references>
        <referencedby refid="parse__string_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="parse__string_8c" startline="122" endline="135">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="parse__string_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/parse_string.c" line="122" column="8" bodyfile="tests/parse_string.c" bodystart="122" bodyend="135"/>
        <references refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" compoundref="parse__string_8c" startline="31">item</references>
        <references refid="parse__string_8c_1ade6210a40c420c0a14eef99cd37c58c3" compoundref="parse__string_8c" startline="109" endline="113">parse_string_should_not_overflow_with_closing_backslash</references>
        <references refid="parse__string_8c_1a8cd0d6e26e1673dbf2bf81505e839bb7" compoundref="parse__string_8c" startline="101" endline="107">parse_string_should_not_parse_invalid_backslash</references>
        <references refid="parse__string_8c_1ad0938d843c87286d6a70fcb37cf7cb28" compoundref="parse__string_8c" startline="93" endline="99">parse_string_should_not_parse_non_strings</references>
        <references refid="parse__string_8c_1aac34fc0edeb39fa1859d91b2bf5abe31" compoundref="parse__string_8c" startline="115" endline="120">parse_string_should_parse_bug_94</references>
        <references refid="parse__string_8c_1a954afd5f12ab1e31e8c653e79d72551f" compoundref="parse__string_8c" startline="73" endline="85">parse_string_should_parse_strings</references>
        <references refid="parse__string_8c_1a5ec06a9079e5fa76a8c8982c5261a018" compoundref="parse__string_8c" startline="87" endline="91">parse_string_should_parse_utf16_surrogate_pairs</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>(c)<sp/>2009-2017<sp/>Dave<sp/>Gamble<sp/>and<sp/>cJSON<sp/>contributors</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unity__config_8h" kindref="compound">unity/examples/unity_config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unity_8h" kindref="compound">unity/src/unity.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcJSON" kindref="compound">cJSON</ref><sp/><ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>[1];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="parse__string_8c_1ac2f14b089f2d862ee79cfd72fe7475fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse__string_8c_1ac2f14b089f2d862ee79cfd72fe7475fa" kindref="member">assert_is_string</ref>(<ref refid="structcJSON" kindref="compound">cJSON</ref><sp/>*string_item)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity_8h_1ab29f13f0eaebfc7cd26c0b9360f66e92" kindref="member">TEST_ASSERT_NOT_NULL_MESSAGE</ref>(string_item,<sp/></highlight><highlight class="stringliteral">&quot;Item<sp/>is<sp/>NULL.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a2c8688f23b1d3dc9584d95cbb2779612" kindref="member">assert_not_in_list</ref>(string_item);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a740922f131411646171056003b2cb526" kindref="member">assert_has_no_child</ref>(string_item);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ace49ab08deaebb78ba9be3240d621aeb" kindref="member">assert_has_type</ref>(string_item,<sp/><ref refid="cJSON_8h_1aa2cb4765308e2bbdf01988b2acdf92d9" kindref="member">cJSON_String</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1a6e62df3c208d5c52b7ac5a43c691a2" kindref="member">assert_has_no_reference</ref>(string_item);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a72c7484cb26a1f6575e20febbdc69b12" kindref="member">assert_has_no_const_string</ref>(string_item);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1af15785a0369ce424005cb37a886827b2" kindref="member">assert_has_valuestring</ref>(string_item);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1aabd3d6d1e1cd513025780693b223f279" kindref="member">assert_has_no_string</ref>(string_item);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" kindref="member">assert_parse_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expected)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/><ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref><sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>{<sp/>0,<sp/>0,<sp/>0<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref>.content<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref>.length<sp/>=<sp/>strlen(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref>.hooks<sp/>=<sp/><ref refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" kindref="member">global_hooks</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity_8h_1ae92bec0a6b42edae91cce2726e34145c" kindref="member">TEST_ASSERT_TRUE_MESSAGE</ref>(<ref refid="cJSON_8c_1adf47b520af96d1bbefa2390016fbdb51" kindref="member">parse_string</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>,<sp/>&amp;<ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>parse<sp/>string.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1ac2f14b089f2d862ee79cfd72fe7475fa" kindref="member">assert_is_string</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity_8h_1abca87135f5bc5737e7e46ab02cddf39e" kindref="member">TEST_ASSERT_EQUAL_STRING_MESSAGE</ref>(expected,<sp/><ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>-&gt;<ref refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" kindref="member">valuestring</ref>,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>parsed<sp/>result<sp/>isn&apos;t<sp/>as<sp/>expected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" kindref="member">global_hooks</ref>.<ref refid="structinternal__hooks_1a183ba09ef4a15f75fec90d3a14ff587e" kindref="member">deallocate</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>-&gt;<ref refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" kindref="member">valuestring</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>-&gt;<ref refid="structcJSON_1ad43f8de2571e504c4c5ce0a36990e6e1" kindref="member">valuestring</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" kindref="member">assert_not_parse_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparse__buffer" kindref="compound">parse_buffer</ref><sp/><ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref><sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>{<sp/>0,<sp/>0,<sp/>0<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref>.content<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref>.length<sp/>=<sp/>strlen(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref>.hooks<sp/>=<sp/><ref refid="cJSON_8c_1a855c7241e836a5b2d87577df8c113faf" kindref="member">global_hooks</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity_8h_1a823e5a92ae440c2c31a623ca18ceb4d0" kindref="member">TEST_ASSERT_FALSE_MESSAGE</ref>(<ref refid="cJSON_8c_1adf47b520af96d1bbefa2390016fbdb51" kindref="member">parse_string</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>,<sp/>&amp;<ref refid="unity__output__Spy_8c_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Malformed<sp/>string<sp/>should<sp/>not<sp/>be<sp/>accepted.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a040a3b994f988d83f9b30b5f7b621155" kindref="member">assert_is_invalid</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="parse__string_8c_1a954afd5f12ab1e31e8c653e79d72551f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse__string_8c_1a954afd5f12ab1e31e8c653e79d72551f" kindref="member">parse_string_should_parse_strings</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" kindref="member">assert_parse_string</ref>(</highlight><highlight class="stringliteral">&quot;\&quot;\&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" kindref="member">assert_parse_string</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>!\\\&quot;#$%&amp;&apos;()*+,-./\\/0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_&apos;abcdefghijklmnopqrstuvwxyz{|}~\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>!\&quot;#$%&amp;&apos;()*+,-.//0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_&apos;abcdefghijklmnopqrstuvwxyz{|}~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" kindref="member">assert_parse_string</ref>(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\\&quot;\\\\\\/\\b\\f\\n\\r\\t\\u20AC\\u732b\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;\\/\b\f\n\r\t€猫&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" kindref="member">reset</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" kindref="member">assert_parse_string</ref>(</highlight><highlight class="stringliteral">&quot;\&quot;\b\f\n\r\t\&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\b\f\n\r\t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" kindref="member">reset</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="parse__string_8c_1a5ec06a9079e5fa76a8c8982c5261a018" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse__string_8c_1a5ec06a9079e5fa76a8c8982c5261a018" kindref="member">parse_string_should_parse_utf16_surrogate_pairs</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" kindref="member">assert_parse_string</ref>(</highlight><highlight class="stringliteral">&quot;\&quot;\\uD83D\\udc31\&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;🐱&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" kindref="member">reset</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="parse__string_8c_1ad0938d843c87286d6a70fcb37cf7cb28" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse__string_8c_1ad0938d843c87286d6a70fcb37cf7cb28" kindref="member">parse_string_should_not_parse_non_strings</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" kindref="member">assert_not_parse_string</ref>(</highlight><highlight class="stringliteral">&quot;this\&quot;<sp/>is<sp/>not<sp/>a<sp/>string\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" kindref="member">reset</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" kindref="member">assert_not_parse_string</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" kindref="member">reset</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="parse__string_8c_1a8cd0d6e26e1673dbf2bf81505e839bb7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse__string_8c_1a8cd0d6e26e1673dbf2bf81505e839bb7" kindref="member">parse_string_should_not_parse_invalid_backslash</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" kindref="member">assert_not_parse_string</ref>(</highlight><highlight class="stringliteral">&quot;Abcdef\\123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" kindref="member">reset</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" kindref="member">assert_not_parse_string</ref>(</highlight><highlight class="stringliteral">&quot;Abcdef\\e23&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" kindref="member">reset</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="parse__string_8c_1ade6210a40c420c0a14eef99cd37c58c3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse__string_8c_1ade6210a40c420c0a14eef99cd37c58c3" kindref="member">parse_string_should_not_overflow_with_closing_backslash</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1a9538a84c38b404f5a10d06634dae7c3f" kindref="member">assert_not_parse_string</ref>(</highlight><highlight class="stringliteral">&quot;\&quot;000000000000000000\\&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" kindref="member">reset</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="parse__string_8c_1aac34fc0edeb39fa1859d91b2bf5abe31" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse__string_8c_1aac34fc0edeb39fa1859d91b2bf5abe31" kindref="member">parse_string_should_parse_bug_94</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;~!@\\\\#$%^&amp;*()\\\\\\\\-\\\\+{}[]:\\\\;\\\\\\\&quot;\\\\&lt;\\\\&gt;?/.,DC=ad,DC=com\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse__string_8c_1aebe3846b5d833bb64c6ece9513489d57" kindref="member">assert_parse_string</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;~!@\\#$%^&amp;*()\\\\-\\+{}[]:\\;\\\&quot;\\&lt;\\&gt;?/.,DC=ad,DC=com&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1dbe1f08dd3011edc95b056ae945417d" kindref="member">reset</ref>(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="parse__string_8c_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cJSON_8h_1a79203c3ba406ffd5736627cc1e082e38" kindref="member">CJSON_CDECL</ref><sp/><ref refid="parse__string_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>cJSON<sp/>item<sp/>and<sp/>error<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<ref refid="parse__string_8c_1a2fb18e347d685a61044e15509c5b7318" kindref="member">item</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcJSON" kindref="compound">cJSON</ref>));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity__internals_8h_1aaad15a5d10e50a412d0a6851d0e5091a" kindref="member">UNITY_BEGIN</ref>();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="example__1_2test_2test__runners_2TestProductionCode2__Runner_8c_1af3a9b37ea192d5f498c7d699d65ad530" kindref="member">RUN_TEST</ref>(<ref refid="parse__string_8c_1a954afd5f12ab1e31e8c653e79d72551f" kindref="member">parse_string_should_parse_strings</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="example__1_2test_2test__runners_2TestProductionCode2__Runner_8c_1af3a9b37ea192d5f498c7d699d65ad530" kindref="member">RUN_TEST</ref>(<ref refid="parse__string_8c_1a5ec06a9079e5fa76a8c8982c5261a018" kindref="member">parse_string_should_parse_utf16_surrogate_pairs</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="example__1_2test_2test__runners_2TestProductionCode2__Runner_8c_1af3a9b37ea192d5f498c7d699d65ad530" kindref="member">RUN_TEST</ref>(<ref refid="parse__string_8c_1ad0938d843c87286d6a70fcb37cf7cb28" kindref="member">parse_string_should_not_parse_non_strings</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="example__1_2test_2test__runners_2TestProductionCode2__Runner_8c_1af3a9b37ea192d5f498c7d699d65ad530" kindref="member">RUN_TEST</ref>(<ref refid="parse__string_8c_1a8cd0d6e26e1673dbf2bf81505e839bb7" kindref="member">parse_string_should_not_parse_invalid_backslash</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="example__1_2test_2test__runners_2TestProductionCode2__Runner_8c_1af3a9b37ea192d5f498c7d699d65ad530" kindref="member">RUN_TEST</ref>(<ref refid="parse__string_8c_1aac34fc0edeb39fa1859d91b2bf5abe31" kindref="member">parse_string_should_parse_bug_94</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="example__1_2test_2test__runners_2TestProductionCode2__Runner_8c_1af3a9b37ea192d5f498c7d699d65ad530" kindref="member">RUN_TEST</ref>(<ref refid="parse__string_8c_1ade6210a40c420c0a14eef99cd37c58c3" kindref="member">parse_string_should_not_overflow_with_closing_backslash</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="unity__internals_8h_1aa519129d3af737eb796fc91720fae26a" kindref="member">UNITY_END</ref>();</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/parse_string.c"/>
  </compounddef>
</doxygen>

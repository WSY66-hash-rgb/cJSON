<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="example__3_2test_2TestProductionCode_8c" kind="file" language="C++">
    <compoundname>TestProductionCode.c</compoundname>
    <includes local="yes">ProductionCode.h</includes>
    <includes refid="unity_8h" local="yes">unity.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ProductionCode.h</label>
      </node>
      <node id="8">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>setjmp.h</label>
      </node>
      <node id="9">
        <label>limits.h</label>
      </node>
      <node id="1">
        <label>tests/unity/examples/example_3/test/TestProductionCode.c</label>
        <link refid="example__3_2test_2TestProductionCode_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>../examples/unity_config.h</label>
        <link refid="unity__config_8h"/>
      </node>
      <node id="7">
        <label>math.h</label>
      </node>
      <node id="4">
        <label>unity_internals.h</label>
        <link refid="unity__internals_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>unity.h</label>
        <link refid="unity_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="example__3_2test_2TestProductionCode_8c_1a8da6d6b33b7597f02434fedca1781cbc" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Counter</definition>
        <argsstring></argsstring>
        <name>Counter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/unity/examples/example_3/test/TestProductionCode.c" line="8" column="12" bodyfile="tests/unity/examples/example_1/src/ProductionCode.c" bodystart="4" bodyend="-1" declfile="tests/unity/examples/example_3/test/TestProductionCode.c" declline="8" declcolumn="12"/>
        <referencedby refid="example__1_2src_2ProductionCode_8c_1a76defbd7150d0c294cdc91f797b60245" compoundref="example__1_2src_2ProductionCode_8c" startline="21" endline="24">FunctionWhichReturnsLocalVariable</referencedby>
        <referencedby refid="unity_8h_1a95c834d6178047ce9e1bce7cbfea2836" compoundref="example__1_2test_2TestProductionCode_8c" startline="10" endline="14">setUp</referencedby>
        <referencedby refid="example__2_2test_2TestProductionCode_8c_1a9cf5bf2d60d8b3ac495494f074f8c2c4" compoundref="example__2_2test_2TestProductionCode_8c" startline="43" endline="51">TEST</referencedby>
        <referencedby refid="example__1_2test_2test__runners_2TestProductionCode__Runner_8c_1aa785dc87e720eb7802a3d95f1cb32496" compoundref="example__1_2test_2TestProductionCode_8c" startline="41" endline="49">test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue</referencedby>
        <referencedby refid="example__2_2test_2TestProductionCode_8c_1a4b2a91bfe6d94402640ffde6d97387e4" compoundref="example__2_2test_2TestProductionCode_8c" startline="12" endline="16">TEST_SETUP</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="example__3_2test_2TestProductionCode_8c_1a95c834d6178047ce9e1bce7cbfea2836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setUp</definition>
        <argsstring>(void)</argsstring>
        <name>setUp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/unity/examples/example_3/test/TestProductionCode.c" line="10" column="6" bodyfile="tests/unity/examples/example_3/test/TestProductionCode.c" bodystart="10" bodyend="14"/>
        <references refid="example__1_2src_2ProductionCode_8c_1a8da6d6b33b7597f02434fedca1781cbc" compoundref="example__1_2src_2ProductionCode_8c" startline="4">Counter</references>
      </memberdef>
      <memberdef kind="function" id="example__3_2test_2TestProductionCode_8c_1a9909011e5fea0c018842eec4d93d0662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tearDown</definition>
        <argsstring>(void)</argsstring>
        <name>tearDown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/unity/examples/example_3/test/TestProductionCode.c" line="16" column="6" bodyfile="tests/unity/examples/example_3/test/TestProductionCode.c" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="example__3_2test_2TestProductionCode_8c_1a456db30f72bd3d195f6186e354d48d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode</definition>
        <argsstring>(void)</argsstring>
        <name>test_FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/unity/examples/example_3/test/TestProductionCode.c" line="20" column="6" bodyfile="tests/unity/examples/example_3/test/TestProductionCode.c" bodystart="20" bodyend="28"/>
        <references refid="example__1_2src_2ProductionCode_8c_1adcb2cff68b396cd27ab1b16a1139d696" compoundref="example__1_2src_2ProductionCode_8c" startline="11" endline="19">FindFunction_WhichIsBroken</references>
        <references refid="unity_8h_1af9e5695d6c7cf634206ea6d062cb54c9" compoundref="unity_8h" startline="133">TEST_ASSERT_EQUAL</references>
        <referencedby refid="example__1_2test_2test__runners_2TestProductionCode__Runner_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="example__1_2test_2test__runners_2TestProductionCode__Runner_8c" startline="47" endline="57">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="example__3_2test_2TestProductionCode_8c_1aefb77df5c263e7f0d0983c5adb2fee34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken</definition>
        <argsstring>(void)</argsstring>
        <name>test_FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/unity/examples/example_3/test/TestProductionCode.c" line="30" column="6" bodyfile="tests/unity/examples/example_3/test/TestProductionCode.c" bodystart="30" bodyend="39"/>
        <references refid="example__1_2src_2ProductionCode_8c_1adcb2cff68b396cd27ab1b16a1139d696" compoundref="example__1_2src_2ProductionCode_8c" startline="11" endline="19">FindFunction_WhichIsBroken</references>
        <references refid="unity_8h_1af9e5695d6c7cf634206ea6d062cb54c9" compoundref="unity_8h" startline="133">TEST_ASSERT_EQUAL</references>
        <referencedby refid="example__1_2test_2test__runners_2TestProductionCode__Runner_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="example__1_2test_2test__runners_2TestProductionCode__Runner_8c" startline="47" endline="57">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="example__3_2test_2TestProductionCode_8c_1aa785dc87e720eb7802a3d95f1cb32496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue</definition>
        <argsstring>(void)</argsstring>
        <name>test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/unity/examples/example_3/test/TestProductionCode.c" line="41" column="6" bodyfile="tests/unity/examples/example_3/test/TestProductionCode.c" bodystart="41" bodyend="49"/>
        <references refid="example__1_2src_2ProductionCode_8c_1a8da6d6b33b7597f02434fedca1781cbc" compoundref="example__1_2src_2ProductionCode_8c" startline="4">Counter</references>
        <references refid="example__1_2src_2ProductionCode_8c_1a76defbd7150d0c294cdc91f797b60245" compoundref="example__1_2src_2ProductionCode_8c" startline="21" endline="24">FunctionWhichReturnsLocalVariable</references>
        <references refid="unity_8h_1ab1497984306b3fe78e851341d82c7147" compoundref="unity_8h" startline="140">TEST_ASSERT_EQUAL_HEX</references>
        <referencedby refid="example__1_2test_2test__runners_2TestProductionCode__Runner_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="example__1_2test_2test__runners_2TestProductionCode__Runner_8c" startline="47" endline="57">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="example__3_2test_2TestProductionCode_8c_1a7e3355b3a7e19feff586380e64271aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain</definition>
        <argsstring>(void)</argsstring>
        <name>test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/unity/examples/example_3/test/TestProductionCode.c" line="51" column="6" bodyfile="tests/unity/examples/example_3/test/TestProductionCode.c" bodystart="51" bodyend="55"/>
        <references refid="example__1_2src_2ProductionCode_8c_1a76defbd7150d0c294cdc91f797b60245" compoundref="example__1_2src_2ProductionCode_8c" startline="21" endline="24">FunctionWhichReturnsLocalVariable</references>
        <references refid="unity_8h_1ab1497984306b3fe78e851341d82c7147" compoundref="unity_8h" startline="140">TEST_ASSERT_EQUAL_HEX</references>
        <referencedby refid="example__1_2test_2test__runners_2TestProductionCode__Runner_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="example__1_2test_2test__runners_2TestProductionCode__Runner_8c" startline="47" endline="57">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="example__3_2test_2TestProductionCode_8c_1acd3888c1cd44175194b4d27a5b0aed2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed</definition>
        <argsstring>(void)</argsstring>
        <name>test_FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/unity/examples/example_3/test/TestProductionCode.c" line="57" column="6" bodyfile="tests/unity/examples/example_3/test/TestProductionCode.c" bodystart="57" bodyend="62"/>
        <references refid="example__1_2src_2ProductionCode_8c_1a76defbd7150d0c294cdc91f797b60245" compoundref="example__1_2src_2ProductionCode_8c" startline="21" endline="24">FunctionWhichReturnsLocalVariable</references>
        <references refid="unity_8h_1ab1497984306b3fe78e851341d82c7147" compoundref="unity_8h" startline="140">TEST_ASSERT_EQUAL_HEX</references>
        <referencedby refid="example__1_2test_2test__runners_2TestProductionCode__Runner_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="example__1_2test_2test__runners_2TestProductionCode__Runner_8c" startline="47" endline="57">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ProductionCode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unity_8h" kindref="compound">unity.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//sometimes<sp/>you<sp/>may<sp/>want<sp/>to<sp/>get<sp/>at<sp/>local<sp/>data<sp/>in<sp/>a<sp/>module.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//for<sp/>example:<sp/>If<sp/>you<sp/>plan<sp/>to<sp/>pass<sp/>by<sp/>reference,<sp/>this<sp/>could<sp/>be<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//however,<sp/>it<sp/>should<sp/>often<sp/>be<sp/>avoided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="example__1_2test_2TestProductionCode_8c_1a8da6d6b33b7597f02434fedca1781cbc" kindref="member">Counter</ref>;<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="example__3_2test_2TestProductionCode_8c_1a95c834d6178047ce9e1bce7cbfea2836" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="example__1_2test_2TestProductionCode_8c_1a95c834d6178047ce9e1bce7cbfea2836" kindref="member">setUp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//This<sp/>is<sp/>run<sp/>before<sp/>EACH<sp/>TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><ref refid="example__1_2test_2TestProductionCode_8c_1a8da6d6b33b7597f02434fedca1781cbc" kindref="member">Counter</ref><sp/>=<sp/>0x5a5a;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="example__3_2test_2TestProductionCode_8c_1a9909011e5fea0c018842eec4d93d0662" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="example__1_2test_2TestProductionCode_8c_1a9909011e5fea0c018842eec4d93d0662" kindref="member">tearDown</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="example__3_2test_2TestProductionCode_8c_1a456db30f72bd3d195f6186e354d48d52" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="example__1_2test_2TestProductionCode_8c_1a456db30f72bd3d195f6186e354d48d52" kindref="member">test_FindFunction_WhichIsBroken_ShouldReturnZeroIfItemIsNotInList_WhichWorksEvenInOurBrokenCode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//All<sp/>of<sp/>these<sp/>should<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="unity_8h_1af9e5695d6c7cf634206ea6d062cb54c9" kindref="member">TEST_ASSERT_EQUAL</ref>(0,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1adcb2cff68b396cd27ab1b16a1139d696" kindref="member">FindFunction_WhichIsBroken</ref>(78));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="unity_8h_1af9e5695d6c7cf634206ea6d062cb54c9" kindref="member">TEST_ASSERT_EQUAL</ref>(0,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1adcb2cff68b396cd27ab1b16a1139d696" kindref="member">FindFunction_WhichIsBroken</ref>(1));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="unity_8h_1af9e5695d6c7cf634206ea6d062cb54c9" kindref="member">TEST_ASSERT_EQUAL</ref>(0,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1adcb2cff68b396cd27ab1b16a1139d696" kindref="member">FindFunction_WhichIsBroken</ref>(33));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="unity_8h_1af9e5695d6c7cf634206ea6d062cb54c9" kindref="member">TEST_ASSERT_EQUAL</ref>(0,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1adcb2cff68b396cd27ab1b16a1139d696" kindref="member">FindFunction_WhichIsBroken</ref>(999));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><ref refid="unity_8h_1af9e5695d6c7cf634206ea6d062cb54c9" kindref="member">TEST_ASSERT_EQUAL</ref>(0,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1adcb2cff68b396cd27ab1b16a1139d696" kindref="member">FindFunction_WhichIsBroken</ref>(-1));</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="example__3_2test_2TestProductionCode_8c_1aefb77df5c263e7f0d0983c5adb2fee34" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="example__1_2test_2TestProductionCode_8c_1aefb77df5c263e7f0d0983c5adb2fee34" kindref="member">test_FindFunction_WhichIsBroken_ShouldReturnTheIndexForItemsInList_WhichWillFailBecauseOurFunctionUnderTestIsBroken</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>see<sp/>this<sp/>line<sp/>fail<sp/>in<sp/>your<sp/>test<sp/>summary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="unity_8h_1af9e5695d6c7cf634206ea6d062cb54c9" kindref="member">TEST_ASSERT_EQUAL</ref>(1,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1adcb2cff68b396cd27ab1b16a1139d696" kindref="member">FindFunction_WhichIsBroken</ref>(34));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notice<sp/>the<sp/>rest<sp/>of<sp/>these<sp/>didn&apos;t<sp/>get<sp/>a<sp/>chance<sp/>to<sp/>run<sp/>because<sp/>the<sp/>line<sp/>above<sp/>failed.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unit<sp/>tests<sp/>abort<sp/>each<sp/>test<sp/>function<sp/>on<sp/>the<sp/>first<sp/>sign<sp/>of<sp/>trouble.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>NEXT<sp/>test<sp/>function<sp/>runs<sp/>as<sp/>normal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="unity_8h_1af9e5695d6c7cf634206ea6d062cb54c9" kindref="member">TEST_ASSERT_EQUAL</ref>(8,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1adcb2cff68b396cd27ab1b16a1139d696" kindref="member">FindFunction_WhichIsBroken</ref>(8888));</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="example__3_2test_2TestProductionCode_8c_1aa785dc87e720eb7802a3d95f1cb32496" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="example__1_2test_2TestProductionCode_8c_1aa785dc87e720eb7802a3d95f1cb32496" kindref="member">test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValue</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>should<sp/>be<sp/>true<sp/>because<sp/>setUp<sp/>set<sp/>this<sp/>up<sp/>for<sp/>us<sp/>before<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity_8h_1ab1497984306b3fe78e851341d82c7147" kindref="member">TEST_ASSERT_EQUAL_HEX</ref>(0x5a5a,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1a76defbd7150d0c294cdc91f797b60245" kindref="member">FunctionWhichReturnsLocalVariable</ref>());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>should<sp/>be<sp/>true<sp/>because<sp/>we<sp/>can<sp/>still<sp/>change<sp/>our<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="example__1_2test_2TestProductionCode_8c_1a8da6d6b33b7597f02434fedca1781cbc" kindref="member">Counter</ref><sp/>=<sp/>0x1234;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity_8h_1ab1497984306b3fe78e851341d82c7147" kindref="member">TEST_ASSERT_EQUAL_HEX</ref>(0x1234,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1a76defbd7150d0c294cdc91f797b60245" kindref="member">FunctionWhichReturnsLocalVariable</ref>());</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="example__3_2test_2TestProductionCode_8c_1a7e3355b3a7e19feff586380e64271aa5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="example__1_2test_2TestProductionCode_8c_1a7e3355b3a7e19feff586380e64271aa5" kindref="member">test_FunctionWhichReturnsLocalVariable_ShouldReturnTheCurrentCounterValueAgain</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>should<sp/>be<sp/>true<sp/>again<sp/>because<sp/>setup<sp/>was<sp/>rerun<sp/>before<sp/>this<sp/>test<sp/>(and<sp/>after<sp/>we<sp/>changed<sp/>it<sp/>to<sp/>0x1234)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity_8h_1ab1497984306b3fe78e851341d82c7147" kindref="member">TEST_ASSERT_EQUAL_HEX</ref>(0x5a5a,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1a76defbd7150d0c294cdc91f797b60245" kindref="member">FunctionWhichReturnsLocalVariable</ref>());</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="example__3_2test_2TestProductionCode_8c_1acd3888c1cd44175194b4d27a5b0aed2e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="example__1_2test_2TestProductionCode_8c_1acd3888c1cd44175194b4d27a5b0aed2e" kindref="member">test_FunctionWhichReturnsLocalVariable_ShouldReturnCurrentCounter_ButFailsBecauseThisTestIsActuallyFlawed</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Sometimes<sp/>you<sp/>get<sp/>the<sp/>test<sp/>wrong.<sp/><sp/>When<sp/>that<sp/>happens,<sp/>you<sp/>get<sp/>a<sp/>failure<sp/>too...<sp/>and<sp/>a<sp/>quick<sp/>look<sp/>should<sp/>tell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>you<sp/>what<sp/>actually<sp/>happened...which<sp/>in<sp/>this<sp/>case<sp/>was<sp/>a<sp/>failure<sp/>to<sp/>setup<sp/>the<sp/>initial<sp/>condition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unity_8h_1ab1497984306b3fe78e851341d82c7147" kindref="member">TEST_ASSERT_EQUAL_HEX</ref>(0x1234,<sp/><ref refid="example__1_2src_2ProductionCode_8c_1a76defbd7150d0c294cdc91f797b60245" kindref="member">FunctionWhichReturnsLocalVariable</ref>());</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/unity/examples/example_3/test/TestProductionCode.c"/>
  </compounddef>
</doxygen>
